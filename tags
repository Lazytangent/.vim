!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/petermai/.vim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/c436bca6/
#	mappings.vim	/^nnoremap # #``$/;"	m
$(TESTS)	pack/andymass/start/vim-matchup/test/new/Makefile	/^$(TESTS):$/;"	t
(a.1) jump between matching words	pack/andymass/start/vim-matchup/README.md	/^#### (a.1) jump between matching words$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(a.2) jump to open and close words	pack/andymass/start/vim-matchup/README.md	/^#### (a.2) jump to open and close words$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(a.3) jump inside	pack/andymass/start/vim-matchup/README.md	/^#### (a.3) jump inside$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(b.1) full set of text objects	pack/andymass/start/vim-matchup/README.md	/^#### (b.1) full set of text objects$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(c.1) highlight `()`, `[]`, and `{}`	pack/andymass/start/vim-matchup/README.md	/^#### (c.1) highlight `()`, `[]`, and `{}`$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(c.2) highlight _all_ matches	pack/andymass/start/vim-matchup/README.md	/^#### (c.2) highlight _all_ matches$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(c.3) display matches off screen	pack/andymass/start/vim-matchup/README.md	/^#### (c.3) display matches off screen$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
(c.4) where am I?	pack/andymass/start/vim-matchup/README.md	/^#### (c.4) where am I?$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
*	mappings.vim	/^nnoremap * *``$/;"	m
*Backward incompatible changes*	pack/junegunn/start/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S	section:CHANGELOG""0.9.4
.	pack/tpope/start/repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
0.10.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.0$/;"	s	chapter:CHANGELOG
0.10.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.1$/;"	s	chapter:CHANGELOG
0.10.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.2$/;"	s	chapter:CHANGELOG
0.10.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.3$/;"	s	chapter:CHANGELOG
0.10.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.4$/;"	s	chapter:CHANGELOG
0.10.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.5$/;"	s	chapter:CHANGELOG
0.10.6	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.6$/;"	s	chapter:CHANGELOG
0.10.7	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.7$/;"	s	chapter:CHANGELOG
0.10.8	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.8$/;"	s	chapter:CHANGELOG
0.10.9	pack/junegunn/start/fzf/CHANGELOG.md	/^0.10.9$/;"	s	chapter:CHANGELOG
0.11.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.11.0$/;"	s	chapter:CHANGELOG
0.11.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.11.1$/;"	s	chapter:CHANGELOG
0.11.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.11.2$/;"	s	chapter:CHANGELOG
0.11.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.11.3$/;"	s	chapter:CHANGELOG
0.11.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.11.4$/;"	s	chapter:CHANGELOG
0.12.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.12.0$/;"	s	chapter:CHANGELOG
0.12.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.12.1$/;"	s	chapter:CHANGELOG
0.12.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.12.2$/;"	s	chapter:CHANGELOG
0.13.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.0$/;"	s	chapter:CHANGELOG
0.13.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.1$/;"	s	chapter:CHANGELOG
0.13.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.2$/;"	s	chapter:CHANGELOG
0.13.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.3$/;"	s	chapter:CHANGELOG
0.13.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.4$/;"	s	chapter:CHANGELOG
0.13.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.13.5$/;"	s	chapter:CHANGELOG
0.15.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.0$/;"	s	chapter:CHANGELOG
0.15.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.1$/;"	s	chapter:CHANGELOG
0.15.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.2$/;"	s	chapter:CHANGELOG
0.15.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.3$/;"	s	chapter:CHANGELOG
0.15.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.4$/;"	s	chapter:CHANGELOG
0.15.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.5$/;"	s	chapter:CHANGELOG
0.15.6	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.6$/;"	s	chapter:CHANGELOG
0.15.7	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.7$/;"	s	chapter:CHANGELOG
0.15.8	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.8$/;"	s	chapter:CHANGELOG
0.15.9	pack/junegunn/start/fzf/CHANGELOG.md	/^0.15.9$/;"	s	chapter:CHANGELOG
0.16.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.0$/;"	s	chapter:CHANGELOG
0.16.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.1$/;"	s	chapter:CHANGELOG
0.16.10	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.10$/;"	s	chapter:CHANGELOG
0.16.11	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.11$/;"	s	chapter:CHANGELOG
0.16.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.2$/;"	s	chapter:CHANGELOG
0.16.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.3$/;"	s	chapter:CHANGELOG
0.16.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.4$/;"	s	chapter:CHANGELOG
0.16.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.5$/;"	s	chapter:CHANGELOG
0.16.6	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.6$/;"	s	chapter:CHANGELOG
0.16.7	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.7$/;"	s	chapter:CHANGELOG
0.16.8	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.8$/;"	s	chapter:CHANGELOG
0.16.9	pack/junegunn/start/fzf/CHANGELOG.md	/^0.16.9$/;"	s	chapter:CHANGELOG
0.17.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.0$/;"	s	chapter:CHANGELOG
0.17.0-2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s	chapter:CHANGELOG
0.17.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.1$/;"	s	chapter:CHANGELOG
0.17.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.3$/;"	s	chapter:CHANGELOG
0.17.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.4$/;"	s	chapter:CHANGELOG
0.17.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.17.5$/;"	s	chapter:CHANGELOG
0.18.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.18.0$/;"	s	chapter:CHANGELOG
0.19.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.19.0$/;"	s	chapter:CHANGELOG
0.20.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.20.0$/;"	s	chapter:CHANGELOG
0.21.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	pack/junegunn/start/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	pack/junegunn/start/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	pack/junegunn/start/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.9.10	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.10$/;"	s	chapter:CHANGELOG
0.9.11	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.11$/;"	s	chapter:CHANGELOG
0.9.12	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.12$/;"	s	chapter:CHANGELOG
0.9.13	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.13$/;"	s	chapter:CHANGELOG
0.9.3	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.3$/;"	s	chapter:CHANGELOG
0.9.4	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.4$/;"	s	chapter:CHANGELOG
0.9.5	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.5$/;"	s	chapter:CHANGELOG
0.9.6	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.6$/;"	s	chapter:CHANGELOG
0.9.7	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.7$/;"	s	chapter:CHANGELOG
0.9.8	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.8$/;"	s	chapter:CHANGELOG
0.9.9	pack/junegunn/start/fzf/CHANGELOG.md	/^0.9.9$/;"	s	chapter:CHANGELOG
1. Update the list of processes by pressing CTRL-R	pack/junegunn/start/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
2. Switch between sources by pressing CTRL-D or CTRL-F	pack/junegunn/start/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3. Interactive ripgrep integration	pack/junegunn/start/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3.0.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 3.0.0$/;"	t	chapter:NERDTree Change Log
3.0.1	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 3.0.1$/;"	t	chapter:NERDTree Change Log
3.1.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 3.1.0$/;"	t	chapter:NERDTree Change Log
3.1.1	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 3.1.1$/;"	t	chapter:NERDTree Change Log
4.0.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 4.0.0$/;"	t	chapter:NERDTree Change Log
4.1.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 4.1.0$/;"	t	chapter:NERDTree Change Log
4.2.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 4.2.0$/;"	t	chapter:NERDTree Change Log
5.0.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 5.0.0$/;"	t	chapter:NERDTree Change Log
5.1	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 5.1$/;"	t	chapter:NERDTree Change Log
5.2	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 5.2$/;"	t	chapter:NERDTree Change Log
5.3	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 5.3$/;"	t	chapter:NERDTree Change Log
6.0	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.0$/;"	t	chapter:NERDTree Change Log
6.1	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.1$/;"	t	chapter:NERDTree Change Log
6.10	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.10$/;"	t	chapter:NERDTree Change Log
6.2	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.2$/;"	t	chapter:NERDTree Change Log
6.3	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.3$/;"	t	chapter:NERDTree Change Log
6.4	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.4$/;"	t	chapter:NERDTree Change Log
6.5	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.5$/;"	t	chapter:NERDTree Change Log
6.6	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.6$/;"	t	chapter:NERDTree Change Log
6.7	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.7$/;"	t	chapter:NERDTree Change Log
6.8	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.8$/;"	t	chapter:NERDTree Change Log
6.9	pack/preservim/start/nerdtree/CHANGELOG.md	/^#### 6.9$/;"	t	chapter:NERDTree Change Log
<C-A>	mappings.vim	/^cnoremap <C-A> <Home>$/;"	m
<C-E>	mappings.vim	/^cnoremap <C-E> <End>$/;"	m
<C-G>S	pack/tpope/start/surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	pack/tpope/start/surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-K>	mappings.vim	/^cnoremap <C-K> <C-U>$/;"	m
<C-L><C-R>	mappings.vim	/^nnoremap <C-L><C-R> :call ExecuteFile()<cr>$/;"	m
<C-N>	mappings.vim	/^cnoremap <C-N> <Down>$/;"	m
<C-N>	pack/tpope/start/fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>NextItem(v:count1)<CR>$/;"	m
<C-P>	mappings.vim	/^cnoremap <C-P> <Up>$/;"	m
<C-P>	pack/tpope/start/fugitive/autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute <SID>PreviousItem(v:count1)<CR>$/;"	m
<C-P>	pack/tpope/start/fugitive/autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute line('.') == 1 ? 'CtrlP ' . fnameescape/;"	m
<C-R>	pack/tpope/start/repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-S>	pack/tpope/start/surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-X><CR>	pack/tpope/start/endwise/plugin/endwise.vim	/^    imap <script> <C-X><CR> <CR><SID>AlwaysEnd$/;"	m
<C-X><CR>	pack/tpope/start/endwise/plugin/endwise.vim	/^  inoremap <buffer> <C-X><CR> <C-X><CR>$/;"	m
<C-j>	mappings.vim	/^nnoremap <C-j> :<C-U>execute "exec 'norm m`' \\| move +" . (0+v:count1)<cr>``$/;"	m
<C-j>	mappings.vim	/^vnoremap <C-j> :<C-U>execute "'<,'>move '<+" . (0+v:count1)<cr>gv$/;"	m
<C-k>	mappings.vim	/^nnoremap <C-k> :<C-U>execute "exec 'norm m`' \\| move -" . (1+v:count1)<cr>``$/;"	m
<C-k>	mappings.vim	/^vnoremap <C-k> :<C-U>execute "'<,'>move '<-" . (1+v:count1)<cr>gv$/;"	m
<CR>	pack/tpope/start/endwise/plugin/endwise.vim	/^    imap <CR> <CR><Plug>DiscretionaryEnd$/;"	m
<CR>	pack/tpope/start/endwise/plugin/endwise.vim	/^  inoremap <buffer> <CR> <CR>$/;"	m
<Plug>(-fzf-complete-finish)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(RepeatDot)	pack/tpope/start/repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg/;"	m
<Plug>(RepeatRedo)	pack/tpope/start/repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	pack/tpope/start/repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	pack/tpope/start/repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(fzf-insert)	pack/junegunn/start/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	pack/junegunn/start/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>AlwaysEnd	pack/tpope/start/endwise/plugin/endwise.vim	/^  imap    <script> <Plug>AlwaysEnd        <SID>AlwaysEnd$/;"	m
<Plug>AutoPairsReturn	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^imap <script> <Plug>AutoPairsReturn <SID>AutoPairsReturn$/;"	m
<Plug>CSurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	pack/tpope/start/commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	pack/tpope/start/commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	pack/tpope/start/commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==#/;"	m
<Plug>Commentary	pack/tpope/start/commentary/plugin/commentary.vim	/^xnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	pack/tpope/start/commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	pack/tpope/start/commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Comme/;"	m
<Plug>Csurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>DiscretionaryEnd	pack/tpope/start/endwise/plugin/endwise.vim	/^  imap    <script> <Plug>DiscretionaryEnd <SID>DiscretionaryEnd$/;"	m
<Plug>Dsurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	pack/tpope/start/surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	pack/tpope/start/surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SurroundRepeat	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSurround	pack/tpope/start/surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	pack/tpope/start/surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>YSsurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	pack/tpope/start/surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Plug>unimpairedBlankDown	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankDown :<C-U>call <SID>BlankDown(v:count1)<CR>$/;"	m
<Plug>unimpairedBlankUp	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedBlankUp   :<C-U>call <SID>BlankUp(v:count1)<CR>$/;"	m
<Plug>unimpairedContextNext	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>Context(0)<CR>$/;"	m
<Plug>unimpairedContextNext	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextNext     :<C-U>call <SID>ContextMotion(0)<CR>$/;"	m
<Plug>unimpairedContextNext	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^xnoremap <silent> <Plug>unimpairedContextNext     :<C-U>exe 'normal! gv'<Bar>call <SID>Context(0/;"	m
<Plug>unimpairedContextPrevious	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>Context(1)<CR>$/;"	m
<Plug>unimpairedContextPrevious	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^onoremap <silent> <Plug>unimpairedContextPrevious :<C-U>call <SID>ContextMotion(1)<CR>$/;"	m
<Plug>unimpairedContextPrevious	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^xnoremap <silent> <Plug>unimpairedContextPrevious :<C-U>exe 'normal! gv'<Bar>call <SID>Context(1/;"	m
<Plug>unimpairedDirectoryNext	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryNext     :<C-U>edit <C-R>=<SID>fnameescape(fnamemodif/;"	m
<Plug>unimpairedDirectoryPrevious	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedDirectoryPrevious :<C-U>edit <C-R>=<SID>fnameescape(fnamemodif/;"	m
<Plug>unimpairedMoveDown	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveDown          :<C-U>call <SID>Move('+',v:count1,'Down')<CR/;"	m
<Plug>unimpairedMoveSelectionDown	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionDown :<C-U>call <SID>MoveSelectionDown(v:count1)</;"	m
<Plug>unimpairedMoveSelectionUp	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^noremap  <silent> <Plug>unimpairedMoveSelectionUp   :<C-U>call <SID>MoveSelectionUp(v:count1)<CR/;"	m
<Plug>unimpairedMoveUp	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedMoveUp            :<C-U>call <SID>Move('--',v:count1,'Up')<CR>$/;"	m
<Plug>unimpairedPaste	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPaste :call <SID>setup_paste()<CR>$/;"	m
<Plug>unimpairedPutAbove	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutAbove :call <SID>putline('[p', 'Above')<CR>$/;"	m
<Plug>unimpairedPutBelow	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^nnoremap <silent> <Plug>unimpairedPutBelow :call <SID>putline(']p', 'Below')<CR>$/;"	m
<SID>:	pack/tpope/start/fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>AlwaysEnd	pack/tpope/start/endwise/plugin/endwise.vim	/^  inoremap <silent> <SID>AlwaysEnd        <C-R>=<SID>crend(1)<CR>$/;"	m
<SID>AutoPairsReturn	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^inoremap <silent> <SID>AutoPairsReturn <C-R>=AutoPairsReturn()<CR>$/;"	m
<SID>DiscretionaryEnd	pack/tpope/start/endwise/plugin/endwise.vim	/^  inoremap <silent> <SID>DiscretionaryEnd <C-R>=<SID>crend(0)<CR>$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)	pack/junegunn/start/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<leader><cr>	mappings.vim	/^map <silent> <leader><cr> :nohlsearch<cr>$/;"	m
<leader><leader>g	mappings.vim	/^nnoremap <leader><leader>g :set operatorfunc=GrepOperator<cr>g@$/;"	m
<leader><leader>g	mappings.vim	/^vnoremap <leader><leader>g :<C-u>call GrepOperator(visualmode())<cr>$/;"	m
<leader>fa	mappings.vim	/^nnoremap <leader>fa :Ag<space>$/;"	m
<leader>fb	mappings.vim	/^nnoremap <leader>fb <cmd>Buffers<cr>$/;"	m
<leader>fc	mappings.vim	/^nnoremap <leader>fc <cmd>Commands<cr>$/;"	m
<leader>ff	mappings.vim	/^nnoremap <leader>ff <cmd>Files<cr>$/;"	m
<leader>fh	mappings.vim	/^nnoremap <leader>fh <cmd>History<cr>$/;"	m
<leader>fr	mappings.vim	/^nnoremap <leader>fr :Rg<space>$/;"	m
<leader>ft	mappings.vim	/^nnoremap <leader>ft :Tags<space>$/;"	m
<leader>fz	mappings.vim	/^nnoremap <leader>fz <cmd>FZF<cr>$/;"	m
<leader>l	mappings.vim	/^nnoremap <leader>l :ls<cr>:b<space>$/;"	m
<leader>nn	mappings.vim	/^nnoremap <leader>nn :NERDTreeFocus<cr>$/;"	m
<localleader>aO	mappings.vim	/^nnoremap <localleader>aO O<Esc>$/;"	m
<localleader>ao	mappings.vim	/^nnoremap <localleader>ao o<Esc>$/;"	m
<localleader>cd	mappings.vim	/^nnoremap <localleader>cd :cd %h<cr>$/;"	m
<localleader>ct	mappings.vim	/^nnoremap <localleader>ct :!ctags -R .<cr><cr>$/;"	m
<localleader>fs	mappings.vim	/^nnoremap <localleader>fs :w<cr>$/;"	m
<localleader>gc	mappings.vim	/^nnoremap <localleader>gc <cmd>Git commit<cr>$/;"	m
<localleader>gl	mappings.vim	/^nnoremap <localleader>gl <cmd>Git pull<cr>$/;"	m
<localleader>gp	mappings.vim	/^nnoremap <localleader>gp <cmd>Git push<cr>$/;"	m
<localleader>gs	mappings.vim	/^nnoremap <localleader>gs <cmd>Git<cr>$/;"	m
<localleader>gw	mappings.vim	/^nnoremap <localleader>gw <cmd>Gwrite<cr>$/;"	m
<localleader>wq	mappings.vim	/^nnoremap <localleader>wq :wq<cr>$/;"	m
<plug>(-fzf-/)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(fzf-complete-buffer-line)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(matchup-%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-%)$/;"	m
<plug>(matchup-%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  onoremap <silent> <plug>(matchup-%)$/;"	m
<plug>(matchup-%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xmap     <silent> <plug>(matchup-%) <sid>(matchup-%)$/;"	m
<plug>(matchup-[%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-[%)$/;"	m
<plug>(matchup-[%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  onoremap <silent> <plug>(matchup-[%)$/;"	m
<plug>(matchup-[%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xmap     <plug>(matchup-[%) <sid>(matchup-[%)$/;"	m
<plug>(matchup-]%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-]%)$/;"	m
<plug>(matchup-]%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  onoremap <silent> <plug>(matchup-]%)$/;"	m
<plug>(matchup-]%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xmap     <plug>(matchup-]%) <sid>(matchup-]%)$/;"	m
<plug>(matchup-c_g%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  inoremap <silent> <plug>(matchup-c_g%)$/;"	m
<plug>(matchup-double-click)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-double-click)$/;"	m
<plug>(matchup-g%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-g%)$/;"	m
<plug>(matchup-g%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  onoremap <silent> <plug>(matchup-g%)$/;"	m
<plug>(matchup-g%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xmap     <silent> <plug>(matchup-g%) <sid>(matchup-g%)$/;"	m
<plug>(matchup-hi-surround)	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  nnoremap <silent> <plug>(matchup-hi-surround)$/;"	m
<plug>(matchup-reload)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <plug>(matchup-reload) :<c-u>MatchupReload<cr>$/;"	m
<plug>(matchup-z%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent> <plug>(matchup-z%)$/;"	m
<plug>(matchup-z%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  onoremap <silent> <plug>(matchup-z%)$/;"	m
<plug>(matchup-z%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xmap     <silent> <plug>(matchup-z%) <sid>(matchup-z%)$/;"	m
<sid>(matchup-%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xnoremap <silent> <sid>(matchup-%)$/;"	m
<sid>(matchup-[%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xnoremap <silent> <sid>(matchup-[%)$/;"	m
<sid>(matchup-]%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xnoremap <silent> <sid>(matchup-]%)$/;"	m
<sid>(matchup-g%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xnoremap <silent> <sid>(matchup-g%)$/;"	m
<sid>(matchup-z%)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  xnoremap <silent> <sid>(matchup-z%)$/;"	m
<sid>(wise)	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  nnoremap <silent><expr> <sid>(wise)$/;"	m
=o	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^  nmap <silent><expr> =o <SID>legacy_option_map(nr2char(getchar()))$/;"	m
=op	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^  nnoremap =op <Nop>$/;"	m
AUTHOR	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
Acknowledgments	pack/andymass/start/vim-matchup/README.md	/^## Acknowledgments$/;"	s	chapter:vim match-up
Add	pack/junegunn/start/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Added `--ansi` option (#150)	pack/junegunn/start/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t	subsection:CHANGELOG""0.9.5""New features
Added `--expect` option (#163)	pack/junegunn/start/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t	subsection:CHANGELOG""0.9.6""New features
Added `--tac` option to reverse the order of the input.	pack/junegunn/start/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t	subsection:CHANGELOG""0.9.4""New features
Advanced customization	pack/junegunn/start/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	pack/junegunn/start/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	pack/junegunn/start/fzf/README.md	/^Advanced topics$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Algo	pack/junegunn/start/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Alt	pack/junegunn/start/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBS	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltDown	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	pack/junegunn/start/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSDown	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltSDown$/;"	c	package:tui
AltSLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltSLeft$/;"	c	package:tui
AltSRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltSRight$/;"	c	package:tui
AltSUp	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltSUp$/;"	c	package:tui
AltUp	pack/junegunn/start/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Ansi	pack/junegunn/start/fzf/src/options.go	/^	Ansi        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
As Vim plugin	pack/junegunn/start/fzf/README.md	/^### As Vim plugin$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
AsEvent	pack/junegunn/start/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	pack/junegunn/start/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	pack/junegunn/start/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AtomicBool	pack/junegunn/start/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	pack/junegunn/start/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	pack/junegunn/start/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t	package:tui	typeref:typename:tcell.Style
Attr	pack/junegunn/start/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	pack/junegunn/start/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrClear	pack/junegunn/start/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	pack/junegunn/start/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrRegular	pack/junegunn/start/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	pack/junegunn/start/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	pack/junegunn/start/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AugroupHotfix	pack/andymass/start/vim-matchup/test/issues/7/hotfix.vim	/^function! AugroupHotfix()$/;"	f
AugroupHotfix	pack/andymass/start/vim-matchup/test/issues/7/hotfix2.vim	/^function! AugroupHotfix()$/;"	f
Auto Pairs	pack/jiangmiao/start/auto-pairs/README.md	/^Auto Pairs$/;"	c
Auto-closing plugins	pack/andymass/start/vim-matchup/README.md	/^### Auto-closing plugins$/;"	S	section:vim match-up""Interoperability
AutoPairsBackInsert	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsBackInsert()$/;"	f
AutoPairsDefaultPairs	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefaultPairs()$/;"	f
AutoPairsDefine	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDefine(pairs, ...)$/;"	f
AutoPairsDelete	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsDelete()$/;"	f
AutoPairsFastWrap	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsFastWrap()$/;"	f
AutoPairsInit	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInit()$/;"	f
AutoPairsInsert	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsInsert(key)$/;"	f
AutoPairsJump	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsJump()$/;"	f
AutoPairsMap	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMap(key)$/;"	f
AutoPairsMoveCharacter	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsMoveCharacter(key)$/;"	f
AutoPairsReturn	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsReturn()$/;"	f
AutoPairsSpace	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsSpace()$/;"	f
AutoPairsToggle	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsToggle()$/;"	f
AutoPairsTryInit	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! AutoPairsTryInit()$/;"	f
BASE	pack/junegunn/start/fzf/test/test_go.rb	/^BASE = File.expand_path('..', __dir__)$/;"	C
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	pack/junegunn/start/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY32	pack/junegunn/start/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	pack/junegunn/start/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	pack/junegunn/start/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	pack/junegunn/start/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	pack/junegunn/start/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	pack/junegunn/start/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYPPC64LE	pack/junegunn/start/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BSpace	pack/junegunn/start/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	pack/junegunn/start/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUILD_FLAGS	pack/junegunn/start/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
BUILD_INVERTED_INDEX	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackwardEOF	pack/junegunn/start/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
BenchmarkExtractColor	pack/junegunn/start/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	pack/junegunn/start/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	pack/junegunn/start/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	pack/junegunn/start/fzf/src/tui/tui.go	/^	Bg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Black	pack/junegunn/start/fzf/src/options.go	/^	Black       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Blink     = Attr(1 << 4)$/;"	c	package:tui
Blink	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Blink2    = Attr(1 << 5)$/;"	c	package:tui
Bold	pack/junegunn/start/fzf/src/options.go	/^	Bold        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Bold      = Attr(1)$/;"	c	package:tui
Bold	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Bookmark	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=? Bookmark :call nerdtree#ui_glue#bookmarkNode('<args>')$/;"	c
BookmarkToRoot	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=+ BookmarkToRoot cal/;"	c
Border	pack/junegunn/start/fzf/src/tui/tui.go	/^	Border       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBottom	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	pack/junegunn/start/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderHorizontal	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderNone	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	pack/junegunn/start/fzf/src/options.go	/^	BorderShape tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	pack/junegunn/start/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	pack/junegunn/start/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderTop	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderVertical	pack/junegunn/start/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
Branch model	pack/andymass/start/vim-matchup/CONTRIBUTING.md	/^## Branch model$/;"	s	chapter:Guide for code contributions
Branches	pack/junegunn/start/fzf/ADVANCED.md	/^### Branches$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Buffer Level Pairs Setting	pack/jiangmiao/start/auto-pairs/README.md	/^Buffer Level Pairs Setting$/;"	s	chapter:Auto Pairs
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.11
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.12
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.13
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.5
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.6
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.7
Bug fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.8
Build instructions	pack/junegunn/start/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	pack/junegunn/start/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	pack/junegunn/start/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	pack/junegunn/start/fzf/README.md	/^Building fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ByOrder	pack/junegunn/start/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	pack/junegunn/start/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	pack/junegunn/start/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	pack/junegunn/start/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
C, C++	pack/andymass/start/vim-matchup/README.md	/^#### C, C++$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
CFill	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	pack/junegunn/start/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	pack/junegunn/start/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMMON_YEAR_DAYS_IN_MONTH	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^  COMMON_YEAR_DAYS_IN_MONTH = [nil, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31].freeze$/;"	C	class:Time
COMPREPLY=	pack/junegunn/start/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	pack/junegunn/start/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CPrint	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	pack/junegunn/start/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CSCOPE_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
Can I have the same NERDTree on every tab automatically?	pack/preservim/start/nerdtree/README.markdown	/^### Can I have the same NERDTree on every tab automatically?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
Case	pack/junegunn/start/fzf/src/options.go	/^	Case        Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	pack/junegunn/start/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	pack/junegunn/start/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	pack/junegunn/start/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	pack/junegunn/start/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Cfind	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Cfind   exe s:Grep(<q-bang>, <q-args>, 'find', '')$/;"	c
Change	pack/junegunn/start/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Changed behavior on `--no-sort`	pack/junegunn/start/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t	subsection:CHANGELOG""0.9.4""*Backward incompatible changes*
Char	pack/junegunn/start/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	pack/junegunn/start/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
Chmod	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -nargs=+ Chmod$/;"	c
Chunk	pack/junegunn/start/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	pack/junegunn/start/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	pack/junegunn/start/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
CleanExtraSpaces	plugin/clean_whitespace.vim	/^function! CleanExtraSpaces()$/;"	f
CleanUp	pack/ludovicchabant/start/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	pack/junegunn/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()            {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	pack/junegunn/start/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearAllBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ClearAllBookmarks call g:NERDTreeBookmark.ClearAll() <bar> call b:/;"	c
ClearBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=* ClearBookmarks cal/;"	c
ClearOnExit	pack/junegunn/start/fzf/src/options.go	/^	ClearOnExit bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Clocate	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Clocate exe s:Grep(<q-bang>, <q-args>, 'locate', '')$/;"	c
Close	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()            {}$/;"	f	unknown:tui.FullscreenRenderer
Close	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	pack/junegunn/start/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	pack/junegunn/start/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
Code style	pack/andymass/start/vim-matchup/CONTRIBUTING.md	/^## Code style$/;"	s	chapter:Guide for code contributions
ColBorder	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelected	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrentSelected      ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	pack/junegunn/start/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	pack/junegunn/start/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	pack/junegunn/start/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color themes	pack/junegunn/start/fzf/ADVANCED.md	/^Color themes$/;"	s	chapter:Advanced fzf examples
ColorAttr	pack/junegunn/start/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	pack/junegunn/start/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	pack/junegunn/start/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	pack/junegunn/start/fzf/src/tui/tui.go	/^	Colored      bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	pack/junegunn/start/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Command-local options	pack/junegunn/start/fzf.vim/README.md	/^### Command-local options$/;"	S	section:fzf :heart: vim""Customization
Commands	pack/junegunn/start/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Commentary	pack/tpope/start/commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
Commit hashes	pack/junegunn/start/fzf/ADVANCED.md	/^### Commit hashes$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Comparable	pack/junegunn/start/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
Completion functions	pack/junegunn/start/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	pack/junegunn/start/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
Configuration	pack/junegunn/start/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Constrain	pack/junegunn/start/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	pack/junegunn/start/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contributing	pack/andymass/start/vim-matchup/README.md	/^### Contributing$/;"	S	section:vim match-up""Development
Contributing	pack/ludovicchabant/start/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	pack/tpope/start/eunuch/README.markdown	/^## Contributing$/;"	s	chapter:eunuch.vim
Contributing	pack/tpope/start/repeat/README.markdown	/^## Contributing$/;"	s	chapter:repeat.vim
Contributing	pack/tpope/start/surround/README.markdown	/^## Contributing$/;"	s	chapter:surround.vim
Contributing	pack/tpope/start/unimpaired/README.markdown	/^## Contributing$/;"	s	chapter:unimpaired.vim
Contributors	pack/jiangmiao/start/auto-pairs/README.md	/^Contributors$/;"	s	chapter:Auto Pairs
CopyRunes	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	struct:util.Chars
CountItems	pack/junegunn/start/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
CppTemplate	pack/andymass/start/vim-matchup/test/issues/69/cpptemplate.vim	/^function! CppTemplate()$/;"	f
Criteria	pack/junegunn/start/fzf/src/options.go	/^	Criteria    []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
CtrlA	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	pack/junegunn/start/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	pack/junegunn/start/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Current	pack/junegunn/start/fzf/src/tui/tui.go	/^	Current      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CurrentMatch	pack/junegunn/start/fzf/src/tui/tui.go	/^	CurrentMatch ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Cursor	pack/junegunn/start/fzf/src/tui/tui.go	/^	Cursor       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Custom completion	pack/junegunn/start/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	pack/junegunn/start/fzf/README.md	/^#### Custom fuzzy completion$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Custom statusline	pack/junegunn/start/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Customization	pack/junegunn/start/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customizing the highlighting colors	pack/andymass/start/vim-matchup/README.md	/^#### Customizing the highlighting colors$/;"	t	subsection:vim match-up""Options""Module matchparen
Cycle	pack/junegunn/start/fzf/src/options.go	/^	Cycle       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
DB_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	pack/junegunn/start/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_TIMEOUT	pack/junegunn/start/fzf/test/test_go.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	pack/junegunn/start/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
Dark256	pack/junegunn/start/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	pack/junegunn/start/fzf/src/tui/tui.go	/^	DarkBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Default16	pack/junegunn/start/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
Del	pack/junegunn/start/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
Delete	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang Delete$/;"	c
Delimiter	pack/junegunn/start/fzf/src/options.go	/^	Delimiter   Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	pack/junegunn/start/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	pack/junegunn/start/fzf/README.md	/^#### Demo$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Dependencies	pack/junegunn/start/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Detailed feature documentation	pack/andymass/start/vim-matchup/README.md	/^### Detailed feature documentation$/;"	S	section:vim match-up""Features
Development	pack/andymass/start/vim-matchup/README.md	/^## Development$/;"	s	chapter:vim match-up
Dim	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Dim       = Attr(1 << 1)$/;"	c	package:tui
Dim	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c	package:tui
Disabled	pack/junegunn/start/fzf/src/tui/tui.go	/^	Disabled     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
DoMatchParen	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^command! DoMatchParen call matchup#matchparen#toggle(1)$/;"	c
Documentation style	pack/andymass/start/vim-matchup/CONTRIBUTING.md	/^## Documentation style$/;"	s	chapter:Guide for code contributions
DoneParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	pack/junegunn/start/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	pack/junegunn/start/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	pack/junegunn/start/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	pack/junegunn/start/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DurWithin	pack/junegunn/start/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	pack/junegunn/start/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
EMPTY_ITER	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^local EMPTY_ITER = function() end$/;"	f
ENVIRONMENT	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	pack/junegunn/start/fzf/install	/^  cat << EOF$/;"	h
EOF	pack/junegunn/start/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	pack/junegunn/start/fzf/install	/^  fish << EOF$/;"	h
EOF	pack/junegunn/start/fzf/uninstall	/^  cat << EOF$/;"	h
ESC	pack/junegunn/start/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EXIT	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
EditBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 EditBookmarks call g:NERDTreeBookmark.Edit()$/;"	c
Emmet	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  command! -nargs=1 Emmet call emmet#expandAbbr(4, <q-args>)$/;"	c
EmmetInstall	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^command! -nargs=0 -bar EmmetInstall call <SID>install_plugin(get(g:, 'user_emmet_mode', 'a'), 1)$/;"	c
EmmetUnitTest	pack/mattn/start/emmet-vim/unittest.vim	/^command! -bang -nargs=* -complete=customlist,<SID>emmet_unittest_complete EmmetUnitTest call s:d/;"	c
EmptyMerger	pack/junegunn/start/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	pack/junegunn/start/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enclose	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	pack/junegunn/start/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	pack/junegunn/start/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	pack/junegunn/start/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
EndwiseAlways	pack/tpope/start/endwise/plugin/endwise.vim	/^function! EndwiseAlways()$/;"	f
EndwiseDiscretionary	pack/tpope/start/endwise/plugin/endwise.vim	/^function! EndwiseDiscretionary()$/;"	f
Environment variables	pack/junegunn/start/fzf/README.md	/^#### Environment variables$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Environment variables / Aliases	pack/junegunn/start/fzf/README.md	/^#### Environment variables \/ Aliases$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
EqualMatch	pack/junegunn/start/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	pack/junegunn/start/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
EunuchRename	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! EunuchRename(src, dst) abort$/;"	f
Event	pack/junegunn/start/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	pack/junegunn/start/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	pack/junegunn/start/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	pack/junegunn/start/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	pack/junegunn/start/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtClose	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c	package:util
EvtHeader	pack/junegunn/start/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	pack/junegunn/start/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	pack/junegunn/start/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	pack/junegunn/start/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	pack/junegunn/start/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	pack/junegunn/start/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	pack/junegunn/start/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	pack/junegunn/start/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	pack/junegunn/start/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example	pack/andymass/start/vim-matchup/test/issues/26/example.rb	/^class Example$/;"	c
Example: Advanced ripgrep integration	pack/junegunn/start/fzf.vim/README.md	/^#### Example: Advanced ripgrep integration$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: Customizing `Files` command	pack/junegunn/start/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `Rg` command with preview window	pack/junegunn/start/fzf.vim/README.md	/^#### Example: `Rg` command with preview window$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	pack/junegunn/start/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Examples	pack/junegunn/start/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	pack/junegunn/start/fzf/README.md	/^Examples$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ExecCommand	pack/junegunn/start/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommand	pack/junegunn/start/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	pack/junegunn/start/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	pack/junegunn/start/fzf/src/util/util_windows.go	/^func ExecCommandWith(_shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecuteFile	plugin/run_code.vim	/^function ExecuteFile()$/;"	f
Executing external programs	pack/junegunn/start/fzf/README.md	/^### Executing external programs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Exit0	pack/junegunn/start/fzf/src/options.go	/^	Exit0       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Expect	pack/junegunn/start/fzf/src/options.go	/^	Expect      map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Explanation of `g:fzf_colors`	pack/junegunn/start/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	pack/junegunn/start/fzf/src/options.go	/^	Extended    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
F1	pack/junegunn/start/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	pack/junegunn/start/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	pack/junegunn/start/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	pack/junegunn/start/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	pack/junegunn/start/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	pack/junegunn/start/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	pack/junegunn/start/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	pack/junegunn/start/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	pack/junegunn/start/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	pack/junegunn/start/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	pack/junegunn/start/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	pack/junegunn/start/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	pack/andymass/start/vim-matchup/README.md	/^## FAQ$/;"	s	chapter:vim match-up
FAQ	pack/tpope/start/commentary/README.markdown	/^## FAQ$/;"	s	chapter:commentary.vim
FAQ	pack/tpope/start/fugitive/README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FAQ	pack/tpope/start/unimpaired/README.markdown	/^## FAQ$/;"	s	chapter:unimpaired.vim
FIELD	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILE	pack/junegunn/start/fzf/test/test_go.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FILESIZE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	pack/junegunn/start/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	pack/junegunn/start/fzf/test/test_go.rb	/^FZF = "FZF_DEFAULT_OPTS= FZF_DEFAULT_COMMAND= #{BASE}\/bin\/fzf"$/;"	C
FZF Vim integration	pack/junegunn/start/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Fcn	pack/andymass/start/vim-matchup/test/issues/16/blocks.vim	/^function! Fcn()$/;"	f
Features	pack/andymass/start/vim-matchup/README.md	/^## Features$/;"	s	chapter:vim match-up
Features	pack/jiangmiao/start/auto-pairs/README.md	/^Features$/;"	s	chapter:Auto Pairs
Fg	pack/junegunn/start/fzf/src/tui/tui.go	/^	Fg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	pack/junegunn/start/fzf/src/options.go	/^	FileWord    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Files and directories	pack/junegunn/start/fzf/README.md	/^#### Files and directories$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Files listed in `git status`	pack/junegunn/start/fzf/ADVANCED.md	/^### Files listed in `git status`$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Fill	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	pack/junegunn/start/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	pack/junegunn/start/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	pack/junegunn/start/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	pack/junegunn/start/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	pack/junegunn/start/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	pack/junegunn/start/fzf/src/options.go	/^	Filter      *string$/;"	m	struct:fzf.Options	typeref:typename:*string
FinishFill	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	pack/junegunn/start/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
Fish shell	pack/junegunn/start/fzf/README.md	/^#### Fish shell$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Fixes and improvements	pack/junegunn/start/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S	section:CHANGELOG""0.10.2
Fly Mode	pack/jiangmiao/start/auto-pairs/README.md	/^Fly Mode$/;"	s	chapter:Auto Pairs
FoldText	ftplugin/javascript.vim	/^  function! FoldText()$/;"	f
Foo	pack/andymass/start/vim-matchup/test/issues/54/foo.vim	/^function! Foo(list, var)$/;"	f
Foo	pack/andymass/start/vim-matchup/test/issues/54/foo.vim	/^function! Foo(var, func)$/;"	f
Frequently Asked Questions	pack/preservim/start/nerdtree/README.markdown	/^## Frequently Asked Questions$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
FugitiveCommonDir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveStatusline	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullscreenRenderer	pack/junegunn/start/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Fuzzy	pack/junegunn/start/fzf/src/options.go	/^	Fuzzy       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	pack/junegunn/start/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
FuzzyAlgo	pack/junegunn/start/fzf/src/options.go	/^	FuzzyAlgo   algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	pack/junegunn/start/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	pack/junegunn/start/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
G	pack/tpope/start/fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comm/;"	c
GO	pack/junegunn/start/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	pack/junegunn/start/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
Generating fzf color theme from Vim color schemes	pack/junegunn/start/fzf/ADVANCED.md	/^### Generating fzf color theme from Vim color schemes$/;"	S	section:Advanced fzf examples""Color themes
Get	pack/junegunn/start/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	pack/junegunn/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	pack/junegunn/start/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
Getting Started	pack/preservim/start/nerdtree/README.markdown	/^## Getting Started$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Git	pack/tpope/start/fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
Global options	pack/junegunn/start/fzf.vim/README.md	/^### Global options$/;"	S	section:fzf :heart: vim""Customization
Global options supported by `fzf#wrap`	pack/junegunn/start/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
GrepOperator	plugin/grep-operator.vim	/^function! GrepOperator(type)$/;"	f
Guide for code contributions	pack/andymass/start/vim-matchup/CONTRIBUTING.md	/^# Guide for code contributions$/;"	c
Gutentags	pack/ludovicchabant/start/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	pack/junegunn/start/fzf/src/tui/tui.go	/^	Gutter       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HTMLHotFix	pack/andymass/start/vim-matchup/test/issues/8/hotfix.vim	/^function! HTMLHotFix()$/;"	f
HasBg	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasFullscreenRenderer	pack/junegunn/start/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	pack/junegunn/start/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
Header	pack/junegunn/start/fzf/src/options.go	/^	Header      []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	pack/junegunn/start/fzf/src/tui/tui.go	/^	Header       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderLines	pack/junegunn/start/fzf/src/options.go	/^	HeaderLines int$/;"	m	struct:fzf.Options	typeref:typename:int
Height	pack/junegunn/start/fzf/src/options.go	/^	Height      sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:sizeSpec
Height	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	pack/junegunn/start/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
HexToColor	pack/junegunn/start/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	pack/junegunn/start/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	pack/junegunn/start/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
History	pack/junegunn/start/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	pack/junegunn/start/fzf/src/options.go	/^	History     *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	pack/junegunn/start/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Host names	pack/junegunn/start/fzf/README.md	/^#### Host names$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
How can I change the default arrows?	pack/preservim/start/nerdtree/README.markdown	/^### How can I change the default arrows?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I close Vim automatically when NERDTree is the last window?	pack/preservim/start/nerdtree/README.markdown	/^### How can I close Vim automatically when NERDTree is the last window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I map a specific key or shortcut to open NERDTree?	pack/preservim/start/nerdtree/README.markdown	/^### How can I map a specific key or shortcut to open NERDTree?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How can I prevent other buffers replacing NERDTree in its window?	pack/preservim/start/nerdtree/README.markdown	/^### How can I prevent other buffers replacing NERDTree in its window?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How do I open NERDTree automatically when Vim starts?	pack/preservim/start/nerdtree/README.markdown	/^### How do I open NERDTree automatically when Vim starts?$/;"	S	section:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)""Frequently Asked Questions
How?	pack/ludovicchabant/start/vim-gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
Hscroll	pack/junegunn/start/fzf/src/options.go	/^	Hscroll     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	pack/junegunn/start/fzf/src/options.go	/^	HscrollOff  int$/;"	m	struct:fzf.Options	typeref:typename:int
HtmlListHotfix	pack/andymass/start/vim-matchup/test/issues/19/hotfix.vim	/^function! HtmlListHotfix()$/;"	f
I16	pack/junegunn/start/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	pack/junegunn/start/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
INDEX_WHOLE_PROJECT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
INMAKE	pack/andymass/start/vim-matchup/test/new/test-delim/Makefile	/^INMAKE := 1$/;"	m
INMAKE	pack/andymass/start/vim-matchup/test/new/test-loader/Makefile	/^INMAKE := 1$/;"	m
ImportFunctionDeclBody	pack/andymass/start/vim-matchup/test/issues/64/ast.cc	/^Error ASTNodeImporter::ImportFunctionDeclBody(FunctionDecl *FromFD,$/;"	f	class:ASTNodeImporter	typeref:typename:Error
Improvements	pack/junegunn/start/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.10
Improvements	pack/junegunn/start/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.3
Improvements	pack/junegunn/start/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.4
Improvements	pack/junegunn/start/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.5
Inclusive and exclusive motions	pack/andymass/start/vim-matchup/README.md	/^### Inclusive and exclusive motions$/;"	S	section:vim match-up""Features
Index	pack/junegunn/start/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	pack/junegunn/start/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	pack/junegunn/start/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	pack/junegunn/start/fzf/src/tui/tui.go	/^	Info         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoStyle	pack/junegunn/start/fzf/src/options.go	/^	InfoStyle   infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Init	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()             {}$/;"	f	unknown:tui.FullscreenRenderer
Init	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	struct:tui.LightRenderer
Init	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
Init	pack/junegunn/start/fzf/src/tui/tui.go	/^	Init()$/;"	n	interface:tui.Renderer
Input	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	pack/junegunn/start/fzf/src/tui/tui.go	/^	Input        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Insert	pack/junegunn/start/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Installation	pack/andymass/start/vim-matchup/README.md	/^## Installation$/;"	s	chapter:vim match-up
Installation	pack/jiangmiao/start/auto-pairs/README.md	/^Installation$/;"	s	chapter:Auto Pairs
Installation	pack/junegunn/start/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	pack/junegunn/start/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	pack/junegunn/start/fzf/README.md	/^Installation$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Installation	pack/preservim/start/nerdtree/README.markdown	/^## Installation$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Installation	pack/tpope/start/commentary/README.markdown	/^## Installation$/;"	s	chapter:commentary.vim
Installation	pack/tpope/start/endwise/README.markdown	/^## Installation$/;"	s	chapter:endwise.vim
Installation	pack/tpope/start/eunuch/README.markdown	/^## Installation$/;"	s	chapter:eunuch.vim
Installation	pack/tpope/start/fugitive/README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
Installation	pack/tpope/start/repeat/README.markdown	/^## Installation$/;"	s	chapter:repeat.vim
Installation	pack/tpope/start/surround/README.markdown	/^## Installation$/;"	s	chapter:surround.vim
Installation	pack/tpope/start/unimpaired/README.markdown	/^## Installation$/;"	s	chapter:unimpaired.vim
Int	pack/junegunn/start/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Interoperability	pack/andymass/start/vim-matchup/README.md	/^## Interoperability$/;"	s	chapter:vim match-up
Introduction	pack/junegunn/start/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Introduction	pack/preservim/start/nerdtree/README.markdown	/^## Introduction$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
Invalid	pack/junegunn/start/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsDefault	pack/junegunn/start/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	pack/junegunn/start/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsLightRendererSupported	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsTty	pack/junegunn/start/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	pack/junegunn/start/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	pack/junegunn/start/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Issue descriptions	pack/andymass/start/vim-matchup/CONTRIBUTING.md	/^# Issue descriptions$/;"	c
Italic	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Italic    = Attr(1 << 2)$/;"	c	package:tui
Italic	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	pack/junegunn/start/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	pack/junegunn/start/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JavaScriptFold	ftplugin/javascript.vim	/^function! JavaScriptFold()$/;"	f
JumpLabels	pack/junegunn/start/fzf/src/options.go	/^	JumpLabels  string$/;"	m	struct:fzf.Options	typeref:typename:string
KEY/EVENT	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KeepRight	pack/junegunn/start/fzf/src/options.go	/^	KeepRight   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Key	pack/junegunn/start/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	pack/junegunn/start/fzf/README.md	/^Key bindings for command-line$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Key bindings for git objects	pack/junegunn/start/fzf/ADVANCED.md	/^Key bindings for git objects$/;"	s	chapter:Advanced fzf examples
Keymap	pack/junegunn/start/fzf/src/options.go	/^	Keymap      map[tui.Event][]action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]action
KillCommand	pack/junegunn/start/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	pack/junegunn/start/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
Known Issues	pack/jiangmiao/start/auto-pairs/README.md	/^Known Issues$/;"	s	chapter:Auto Pairs
LAYOUT	pack/junegunn/start/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf-tmux
LICENSE	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
Layout	pack/junegunn/start/fzf/README.md	/^#### Layout$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Layout	pack/junegunn/start/fzf/src/options.go	/^	Layout      layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
LeadingWhitespaces	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Left	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	pack/junegunn/start/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	pack/junegunn/start/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	pack/junegunn/start/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	pack/junegunn/start/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	pack/junegunn/start/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	pack/junegunn/start/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	pack/junegunn/start/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	pack/junegunn/start/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	pack/junegunn/start/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
Lfind	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Lfind   exe s:Grep(<q-bang>, <q-args>, 'find', 'l')$/;"	c
License	pack/jiangmiao/start/auto-pairs/README.md	/^License$/;"	s	chapter:Auto Pairs
License	pack/junegunn/start/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	pack/junegunn/start/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	pack/tpope/start/commentary/README.markdown	/^## License$/;"	s	chapter:commentary.vim
License	pack/tpope/start/endwise/README.markdown	/^## License$/;"	s	chapter:endwise.vim
License	pack/tpope/start/eunuch/README.markdown	/^## License$/;"	s	chapter:eunuch.vim
License	pack/tpope/start/fugitive/README.markdown	/^## License$/;"	s	chapter:fugitive.vim
License	pack/tpope/start/repeat/README.markdown	/^## License$/;"	s	chapter:repeat.vim
License	pack/tpope/start/surround/README.markdown	/^## License$/;"	s	chapter:surround.vim
License	pack/tpope/start/unimpaired/README.markdown	/^## License$/;"	s	chapter:unimpaired.vim
Light256	pack/junegunn/start/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	pack/junegunn/start/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	pack/junegunn/start/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
Line-wise operator/text-object combinations	pack/andymass/start/vim-matchup/README.md	/^### Line-wise operator\/text-object combinations$/;"	S	section:vim match-up""Features
Llocate	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=+ Llocate exe s:Grep(<q-bang>, <q-args>, 'locate', 'l'/;"	c
Log tailing	pack/junegunn/start/fzf/ADVANCED.md	/^Log tailing$/;"	s	chapter:Advanced fzf examples
Lookup	pack/junegunn/start/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	pack/junegunn/start/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	struct:fzf.Terminal
LoopParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
Lorem	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^  class Lorem < Ipsum $/;"	c	module:LoremIpsum
LoremIpsum	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^module LoremIpsum $/;"	m
M.active	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/hl-info.lua	/^function M.active()$/;"	f
M.attach	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.attach(bufnr, lang)$/;"	f
M.collect_group_results	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^function M.collect_group_results(bufnr, query_group, root, lang)$/;"	f
M.containing_scope	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.containing_scope(node, bufnr, key)$/;"	f
M.detach	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.detach(bufnr)$/;"	f
M.do_node_result	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.do_node_result(initial_node, bufnr, opts, side, key)$/;"	f
M.get_active_nodes	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^M.get_active_nodes = ts_utils.memoize_by_buf_tick(function(bufnr)$/;"	f
M.get_delim	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.get_delim(bufnr, opts)$/;"	f
M.get_matches	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.get_matches(bufnr)$/;"	f
M.get_matches	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  function M.get_matches(bufnr, query_group)$/;"	f
M.get_matching	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.get_matching(delim, down, bufnr)$/;"	f
M.get_query	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  function M.get_query(lang, query_name)$/;"	f
M.get_scopes	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.get_scopes(bufnr)$/;"	f
M.get_treesitter_hl	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/hl-info.lua	/^function M.get_treesitter_hl(cursor)$/;"	f
M.init	pack/andymass/start/vim-matchup/lua/treesitter-matchup.lua	/^function M.init()$/;"	f
M.invalidate_query_cache	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  function M.invalidate_query_cache(lang, query_name)$/;"	f
M.invalidate_query_file	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^function M.invalidate_query_file(fname)$/;"	f
M.is_active	pack/andymass/start/vim-matchup/lua/treesitter-matchup/syntax.lua	/^function M.is_active(bufnr)$/;"	f
M.is_enabled	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^function M.is_enabled(bufnr)$/;"	f
M.iter_group_results	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^function M.iter_group_results(bufnr, query_group, root, root_lang)$/;"	f
M.iter_prepared_matches	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^function M.iter_prepared_matches(query, qnode, bufnr, start_row, end_row)$/;"	f
M.synID	pack/andymass/start/vim-matchup/lua/treesitter-matchup/syntax.lua	/^function M.synID(lnum, col, transparent)$/;"	f
M.uuid4	pack/andymass/start/vim-matchup/lua/treesitter-matchup/util.lua	/^function M.uuid4()$/;"	f
MAKEFILE	pack/junegunn/start/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MYVIM	pack/andymass/start/vim-matchup/test/new/Makefile	/^MYVIM ?= nvim --headless$/;"	m
MYVIM	pack/andymass/start/vim-matchup/test/new/test-delim/Makefile	/^MYVIM ?= nvim --headless$/;"	m
MYVIM	pack/andymass/start/vim-matchup/test/new/test-loader/Makefile	/^MYVIM ?= nvim --headless$/;"	m
MakeBorderStyle	pack/junegunn/start/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	pack/junegunn/start/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
MakeTags	mappings.vim	/^command! MakeTags !ctags -R .$/;"	c
MakeTransparentBorder	pack/junegunn/start/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
Mappings	pack/junegunn/start/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	pack/junegunn/start/fzf/src/options.go	/^	Margin      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
Marker	pack/junegunn/start/fzf/src/options.go	/^	Marker      string$/;"	m	struct:fzf.Options	typeref:typename:string
Match	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	pack/junegunn/start/fzf/src/tui/tui.go	/^	Match        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchItem	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	pack/junegunn/start/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	pack/junegunn/start/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Matchit	pack/andymass/start/vim-matchup/README.md	/^### Matchit$/;"	S	section:vim match-up""Interoperability
Matchparen emulation	pack/andymass/start/vim-matchup/README.md	/^### Matchparen emulation$/;"	S	section:vim match-up""Interoperability
MatchupClearTimes	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^command! MatchupClearTimes let g:matchup#perf#times = {}$/;"	c
MatchupReload	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  command! MatchupReload          call matchup#misc#reload()$/;"	c
MatchupShowTimes	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^command! MatchupShowTimes call matchup#perf#show_times()$/;"	c
MatchupStatusOffscreen	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! MatchupStatusOffscreen() " {{{1$/;"	f
MatchupWhereAmI	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  command! -nargs=? -bang MatchupWhereAmI$/;"	c
Max	pack/junegunn/start/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	pack/junegunn/start/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	pack/junegunn/start/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxX	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	pack/junegunn/start/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	pack/junegunn/start/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	pack/junegunn/start/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Min	pack/junegunn/start/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	pack/junegunn/start/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	pack/junegunn/start/fzf/src/options.go	/^	MinHeight   int$/;"	m	struct:fzf.Options	typeref:typename:int
Minor improvements/fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.0
Minor improvements/fixes	pack/junegunn/start/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.1
Mkdir	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -nargs=? -complete=dir Mkdir$/;"	c
Mod	pack/junegunn/start/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Module matchparen	pack/andymass/start/vim-matchup/README.md	/^### Module matchparen$/;"	S	section:vim match-up""Options
Module motion	pack/andymass/start/vim-matchup/README.md	/^### Module motion$/;"	S	section:vim match-up""Options
Module text_obj	pack/andymass/start/vim-matchup/README.md	/^### Module text_obj$/;"	S	section:vim match-up""Options
Module transmute	pack/andymass/start/vim-matchup/README.md	/^### Module transmute$/;"	S	section:vim match-up""Options
Mouse	pack/junegunn/start/fzf/src/options.go	/^	Mouse       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	pack/junegunn/start/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	pack/junegunn/start/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	pack/junegunn/start/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	pack/junegunn/start/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
Move	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -nargs=1 -bang -complete=file Move$/;"	c
MoveAndClear	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	pack/junegunn/start/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
Multi	pack/junegunn/start/fzf/src/options.go	/^	Multi       int$/;"	m	struct:fzf.Options	typeref:typename:int
Multibyte Pairs	pack/jiangmiao/start/auto-pairs/README.md	/^Multibyte Pairs$/;"	s	chapter:Auto Pairs
NAME	pack/junegunn/start/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NERDTree	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTree :call g:NERDTreeCreator.CreateTabTree('<args>')$/;"	c
NERDTree	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree Change Log	pack/preservim/start/nerdtree/CHANGELOG.md	/^# NERDTree Change Log$/;"	c
NERDTree Plugins	pack/preservim/start/nerdtree/README.markdown	/^## NERDTree Plugins$/;"	s	chapter:The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)
NERDTreeAddKeyMap	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddPathFilter	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddPathFilter(callback)$/;"	f
NERDTreeAddSubmenu	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeCWD	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeCWD call NERDTreeCWD()$/;"	c
NERDTreeCWD	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeCWD()$/;"	f
NERDTreeChDirOnTabSwitch	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeChDirOnTabSwitch$/;"	a
NERDTreeClose	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeClose :call g:NERDTree.Close()$/;"	c
NERDTreeCopyNode	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeCopyPath	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyPath()$/;"	f
NERDTreeDeleteNode	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	pack/preservim/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	pack/preservim/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeExecuteFile	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFile()$/;"	f
NERDTreeExecuteFileLinux	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileLinux()$/;"	f
NERDTreeExecuteFileWindows	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeExecuteFileWindows()$/;"	f
NERDTreeFind	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=file -bar NERDTreeFind call s:findAndRevealPath('<args>')$/;"	c
NERDTreeFocus	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeFocus call NERDTreeFocus()$/;"	c
NERDTreeFocus	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeFocus()$/;"	f
NERDTreeFromBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=1 -complete=customlist,nerdtree#completeBookmarks -bar NERDTreeFromBookmark call/;"	c
NERDTreeHijackNetrw	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeListNode	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNode()$/;"	f
NERDTreeListNodeWin32	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeListNodeWin32()$/;"	f
NERDTreeMirror	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeMirror call g:NERDTreeCreator.CreateMirror()$/;"	c
NERDTreeMoveNode	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeQuickLook	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeQuickLook()$/;"	f
NERDTreeRefreshRoot	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=0 -bar NERDTreeRefreshRoot call s:refreshRoot()$/;"	c
NERDTreeRender	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeRevealFileLinux	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealFileLinux()$/;"	f
NERDTreeRevealInFinder	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeRevealInFinder()$/;"	f
NERDTreeSystemCommand	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeSystemCommand()$/;"	f
NERDTreeToggle	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^    command! -n=? -complete=dir -bar NERDTreeToggle :call g:NERDTreeCreator.ToggleTabTree('<args/;"	c
NERDTreeToggleVCS	pack/preservim/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeToggleVCS :call <SID>ToggleTabTreeVCS('<args>')$/;"	c
NERDTreeVCS	pack/preservim/start/nerdtree/nerdtree_plugin/vcs.vim	/^command! -n=? -complete=dir -bar NERDTreeVCS :call <SID>CreateTabTreeVCS('<args>')$/;"	c
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.0
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.1
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.10
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.11
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.12
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.13
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.3
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.4
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.5
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.6
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.7
New features	pack/junegunn/start/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.9
NewAtomicBool	pack/junegunn/start/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	pack/junegunn/start/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf	typeref:typename:ChunkCache
NewChunkList	pack/junegunn/start/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	pack/junegunn/start/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	pack/junegunn/start/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	pack/junegunn/start/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewFullscreenRenderer	pack/junegunn/start/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	pack/junegunn/start/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	pack/junegunn/start/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui	typeref:typename:Renderer
NewMatcher	pack/junegunn/start/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	pack/junegunn/start/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
NewReader	pack/junegunn/start/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool, wait bool) *Rea/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	pack/junegunn/start/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf	typeref:typename:*Terminal
NewWindow	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, border/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	pack/junegunn/start/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Wind/;"	n	interface:tui.Renderer	typeref:typename:Window
NoColorTheme	pack/junegunn/start/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
NoMatchParen	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^command! NoMatchParen call matchup#matchparen#toggle(0)$/;"	c
Normalize	pack/junegunn/start/fzf/src/options.go	/^	Normalize   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	pack/junegunn/start/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Nth	pack/junegunn/start/fzf/src/options.go	/^	Nth         []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
OPTIONS	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
Offset	pack/junegunn/start/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
Once	pack/junegunn/start/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
OpenBookmark	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 OpenBookmark call /;"	c
OpenFile	autocmds.vim	/^augroup OpenFile$/;"	a
Options	pack/andymass/start/vim-matchup/README.md	/^## Options$/;"	s	chapter:vim match-up
Options	pack/jiangmiao/start/auto-pairs/README.md	/^Options$/;"	s	chapter:Auto Pairs
Options	pack/junegunn/start/fzf/README.md	/^#### Options$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Options	pack/junegunn/start/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Origins	pack/andymass/start/vim-matchup/README.md	/^### Origins$/;"	S	section:vim match-up""Acknowledgments
Other inspirations	pack/andymass/start/vim-matchup/README.md	/^### Other inspirations$/;"	S	section:vim match-up""Acknowledgments
Overview	pack/andymass/start/vim-matchup/README.md	/^## Overview$/;"	s	chapter:vim match-up
PAUSE_BEFORE_EXIT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
POST_PROCESS_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PS1	pack/junegunn/start/fzf/test/test_go.rb	/^PS1= PROMPT_COMMAND= HISTFILE= HISTSIZE=100$/;"	C
Padding	pack/junegunn/start/fzf/src/options.go	/^	Padding     [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
ParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	pack/junegunn/start/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
ParseRange	pack/junegunn/start/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
PassMerger	pack/junegunn/start/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
Pattern	pack/junegunn/start/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)        {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	pack/junegunn/start/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Peek	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Performance	pack/junegunn/start/fzf/README.md	/^### Performance$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PgDn	pack/junegunn/start/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	pack/junegunn/start/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Phony	pack/junegunn/start/fzf/src/options.go	/^	Phony       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Pointer	pack/junegunn/start/fzf/src/options.go	/^	Pointer     string$/;"	m	struct:fzf.Options	typeref:typename:string
Popup window support	pack/junegunn/start/fzf/ADVANCED.md	/^#### Popup window support$/;"	t	subsection:Advanced fzf examples""Screen Layout""`fzf-tmux`
PrefixMatch	pack/junegunn/start/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	pack/junegunn/start/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Preview	pack/junegunn/start/fzf/src/options.go	/^	Preview     previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	pack/junegunn/start/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Global options
Preview window	pack/junegunn/start/fzf/README.md	/^### Preview window$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PreviewBg	pack/junegunn/start/fzf/src/tui/tui.go	/^	PreviewBg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	pack/junegunn/start/fzf/src/tui/tui.go	/^	PreviewFg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Print	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	pack/junegunn/start/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	pack/junegunn/start/fzf/src/options.go	/^	PrintQuery  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	pack/junegunn/start/fzf/src/options.go	/^	PrintSep    string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	pack/junegunn/start/fzf/src/options.go	/^	Printer     func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Process IDs	pack/junegunn/start/fzf/README.md	/^#### Process IDs$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Prompt	pack/junegunn/start/fzf/src/options.go	/^	Prompt      string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	pack/junegunn/start/fzf/src/tui/tui.go	/^	Prompt       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Pros	pack/junegunn/start/fzf/README.md	/^Pros$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Protect	pack/junegunn/start/fzf/src/protector/protector.go	/^func Protect() {$/;"	f	package:protector
Protect	pack/junegunn/start/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
Push	pack/junegunn/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Pushing	pack/ludovicchabant/start/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
Query	pack/junegunn/start/fzf/src/options.go	/^	Query       string$/;"	m	struct:fzf.Options	typeref:typename:string
README.md	pack/andymass/start/vim-matchup/.projections.json	/^  "README.md": {"type": "readme"},$/;"	o
REVISION	pack/junegunn/start/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	pack/junegunn/start/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	pack/junegunn/start/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
Range	pack/junegunn/start/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Rationale	pack/junegunn/start/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Read	pack/junegunn/start/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	pack/junegunn/start/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 ReadBookmarks call g:NERDTreeBookmark.CacheBookmarks(0) <bar> call/;"	c
ReadSource	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	struct:fzf.Reader
ReadZero	pack/junegunn/start/fzf/src/options.go	/^	ReadZero    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	pack/junegunn/start/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Reduced initial memory footprint (#151)	pack/junegunn/start/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t	subsection:CHANGELOG""0.9.5""Improvements
Reducer example	pack/junegunn/start/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Refresh	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()          {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	pack/junegunn/start/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	pack/junegunn/start/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	pack/junegunn/start/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related Projects	pack/ludovicchabant/start/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related projects	pack/junegunn/start/fzf/README.md	/^Related projects$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Reloading the candidate list	pack/junegunn/start/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Remove	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang Remove Unlink<bang>$/;"	c
Rename	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -nargs=1 -bang -complete=custom,s:Rename_complete Rename$/;"	c
Renderer	pack/junegunn/start/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
Reporting problems	pack/andymass/start/vim-matchup/README.md	/^### Reporting problems$/;"	S	section:vim match-up""Development
Reset	pack/junegunn/start/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	pack/junegunn/start/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Respecting `.gitignore`	pack/junegunn/start/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Result	pack/junegunn/start/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	pack/junegunn/start/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Resume	pack/junegunn/start/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool) {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	pack/junegunn/start/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
RevealBookmark	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -complete=customlist,nerdtree#completeBookmarks -nargs=1 RevealBookmark :ca/;"	c
Reverse	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Reverse   = Attr(1 << 6)$/;"	c	package:tui
Reverse	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c	package:tui
Right	pack/junegunn/start/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	pack/junegunn/start/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	pack/junegunn/start/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Run	pack/junegunn/start/fzf/src/core.go	/^func Run(opts *Options, version string, revision string) {$/;"	f	package:fzf
RunShellCommand	plugin/run_code.vim	/^function RunShellCommand(cmdline)$/;"	f
Rune	pack/junegunn/start/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	pack/junegunn/start/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	pack/junegunn/start/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
S	pack/junegunn/start/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
S	pack/tpope/start/surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
SDown	pack/junegunn/start/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SEE	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SHELL	pack/junegunn/start/fzf/Makefile	/^SHELL          := bash$/;"	m
SLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SOURCES	pack/junegunn/start/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SQLHotFix	pack/andymass/start/vim-matchup/test/issues/3/hotfix.vim	/^function! SQLHotFix()$/;"	f
SRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
SUp	pack/junegunn/start/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	pack/junegunn/start/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	pack/junegunn/start/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Sample	pack/andymass/start/vim-matchup/test/issues/46/Sample.jsx	/^const Sample = <Sample prop='highlight test'>$/;"	C
Score	pack/junegunn/start/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screen Layout	pack/junegunn/start/fzf/ADVANCED.md	/^Screen Layout$/;"	s	chapter:Advanced fzf examples
Screencasts	pack/tpope/start/fugitive/README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
Screenshot	pack/andymass/start/vim-matchup/README.md	/^## Screenshot$/;"	s	chapter:vim match-up
Search	pack/junegunn/start/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	pack/junegunn/start/fzf/README.md	/^#### Search syntax$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Select1	pack/junegunn/start/fzf/src/options.go	/^	Select1     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Selected	pack/junegunn/start/fzf/src/tui/tui.go	/^	Selected     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Self-Promotion	pack/tpope/start/commentary/README.markdown	/^## Self-Promotion$/;"	s	chapter:commentary.vim
Self-Promotion	pack/tpope/start/endwise/README.markdown	/^## Self-Promotion$/;"	s	chapter:endwise.vim
Self-Promotion	pack/tpope/start/eunuch/README.markdown	/^## Self-Promotion$/;"	s	chapter:eunuch.vim
Self-Promotion	pack/tpope/start/fugitive/README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
Self-Promotion	pack/tpope/start/repeat/README.markdown	/^## Self-Promotion$/;"	s	chapter:repeat.vim
Self-Promotion	pack/tpope/start/surround/README.markdown	/^## Self-Promotion$/;"	s	chapter:surround.vim
Self-Promotion	pack/tpope/start/unimpaired/README.markdown	/^## Self-Promotion$/;"	s	chapter:unimpaired.vim
Set	pack/junegunn/start/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	pack/junegunn/start/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	pack/junegunn/start/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
Settings	pack/junegunn/start/fzf/README.md	/^#### Settings$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Shell	pack/junegunn/start/fzf/test/test_go.rb	/^class Shell$/;"	c
Shortcuts	pack/jiangmiao/start/auto-pairs/README.md	/^Shortcuts$/;"	s	chapter:Auto Pairs
ShowUsage	pack/ludovicchabant/start/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	pack/ludovicchabant/start/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Slab	pack/junegunn/start/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	pack/junegunn/start/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int)
Sort	pack/junegunn/start/fzf/src/options.go	/^	Sort        int$/;"	m	struct:fzf.Options	typeref:typename:int
Spinner	pack/junegunn/start/fzf/src/tui/tui.go	/^	Spinner      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Start	pack/junegunn/start/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Starting fzf in a popup window	pack/junegunn/start/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status line of terminal buffer	pack/junegunn/start/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
String	pack/andymass/start/vim-matchup/test/issues/10/string.vim	/^function String()$/;"	f
String	pack/junegunn/start/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	pack/junegunn/start/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	pack/junegunn/start/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
Style	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
SudoEdit	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang -complete=file -nargs=? SudoEdit$/;"	c
SudoWrite	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar SudoWrite$/;"	c
SuffixMatch	pack/junegunn/start/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	pack/junegunn/start/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
Supported commands	pack/junegunn/start/fzf/README.md	/^#### Supported commands$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Surroundings	pack/andymass/start/vim-matchup/README.md	/^### Surroundings$/;"	S	section:vim match-up""Interoperability
Swap	pack/junegunn/start/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	pack/junegunn/start/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	pack/junegunn/start/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switching to fzf-only search mode	pack/junegunn/start/fzf/ADVANCED.md	/^### Switching to fzf-only search mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
Sync	pack/junegunn/start/fzf/src/options.go	/^	Sync        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
TAGS_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEMPLATE	pack/junegunn/start/fzf/test/test_go.rb	/^TEMPLATE = DATA.read$/;"	C
TEMPNAME	pack/junegunn/start/fzf/test/test_go.rb	/^  TEMPNAME = '\/tmp\/output'$/;"	C	class:TestBase
TESTS	pack/andymass/start/vim-matchup/test/new/Makefile	/^TESTS := $(wildcard test-*)$/;"	m
TSRange_from_table	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^local function TSRange_from_table(buf, range)$/;"	f
Tab	pack/junegunn/start/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Table of Contents	pack/junegunn/start/fzf/README.md	/^Table of Contents$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Table of contents	pack/andymass/start/vim-matchup/README.md	/^## Table of contents$/;"	s	chapter:vim match-up
Tabstop	pack/junegunn/start/fzf/src/options.go	/^	Tabstop     int$/;"	m	struct:fzf.Options	typeref:typename:int
Tac	pack/junegunn/start/fzf/src/options.go	/^	Tac         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
TcellWindow	pack/junegunn/start/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
Terminal	pack/junegunn/start/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
TestAdditiveExpect	pack/junegunn/start/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAnsiCodeStringConversion	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAtomicBool	pack/junegunn/start/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	pack/junegunn/start/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	pack/junegunn/start/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
TestBind	pack/junegunn/start/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	pack/junegunn/start/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	pack/junegunn/start/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	pack/junegunn/start/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	pack/junegunn/start/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	pack/junegunn/start/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	pack/junegunn/start/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestContrain	pack/junegunn/start/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f	package:util
TestDefaultCtrlNP	pack/junegunn/start/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	pack/junegunn/start/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	pack/junegunn/start/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	pack/junegunn/start/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestEmptyMerger	pack/junegunn/start/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	pack/junegunn/start/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	mixin:include:TestShell
TestFuzzyMatch	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGoFZF	pack/junegunn/start/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHexToColor	pack/junegunn/start/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	pack/junegunn/start/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	pack/junegunn/start/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLongString	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestMax	pack/junegunn/start/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMergerSorted	pack/junegunn/start/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	pack/junegunn/start/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNormalize	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	pack/junegunn/start/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	pack/junegunn/start/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseAnsiCode	pack/junegunn/start/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	pack/junegunn/start/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	pack/junegunn/start/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParseRange	pack/junegunn/start/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	pack/junegunn/start/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	pack/junegunn/start/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntryCmd	pack/junegunn/start/fzf/src/terminal_test.go	/^func TestQuoteEntryCmd(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	pack/junegunn/start/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	pack/junegunn/start/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestReplacePlaceholder	pack/junegunn/start/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	pack/junegunn/start/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestShell	pack/junegunn/start/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	pack/junegunn/start/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	pack/junegunn/start/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSuffixMatch	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestToCharsAscii	pack/junegunn/start/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	pack/junegunn/start/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	pack/junegunn/start/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	pack/junegunn/start/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	pack/junegunn/start/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	pack/junegunn/start/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestValidateSign	pack/junegunn/start/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestZsh	pack/junegunn/start/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
Testing	pack/ludovicchabant/start/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
The NERDTree [![Vint](https://github.com/preservim/nerdtree/workflows/Vint/badge.svg)](https://github.com/preservim/nerdtree/actions?workflow=Vint)	pack/preservim/start/nerdtree/README.markdown	/^# The NERDTree [![Vint](https:\/\/github.com\/preservim\/nerdtree\/workflows\/Vint\/badge.svg)](/;"	c
Theme	pack/junegunn/start/fzf/src/options.go	/^	Theme       *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Third-party libraries used	pack/junegunn/start/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
Time	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^class Time$/;"	c
Tips	pack/junegunn/start/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	pack/junegunn/start/fzf/README.md	/^Tips$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tmux	pack/junegunn/start/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	pack/junegunn/start/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToRunes	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	pack/junegunn/start/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
ToggleSort	pack/junegunn/start/fzf/src/options.go	/^	ToggleSort  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling between data sources	pack/junegunn/start/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	pack/junegunn/start/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	pack/junegunn/start/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Top	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	pack/junegunn/start/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TrailingWhitespaces	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	pack/junegunn/start/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Tree-sitter integration	pack/andymass/start/vim-matchup/README.md	/^### Tree-sitter integration$/;"	S	section:vim match-up""Installation
TrimLength	pack/junegunn/start/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimTrailingWhitespaces	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f	struct:util.Chars
TroubleShooting	pack/jiangmiao/start/auto-pairs/README.md	/^TroubleShooting$/;"	s	chapter:Auto Pairs
TtyIn	pack/junegunn/start/fzf/src/tui/ttyname_unix.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
TtyIn	pack/junegunn/start/fzf/src/tui/ttyname_windows.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
Type	pack/junegunn/start/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
U	pack/tpope/start/repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
UNAME_M	pack/junegunn/start/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNSETS	pack/junegunn/start/fzf/test/test_go.rb	/^UNSETS = %w[$/;"	C
UPDATED_SOURCE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Underline	pack/junegunn/start/fzf/src/tui/dummy.go	/^	Underline = Attr(1 << 3)$/;"	c	package:tui
Underline	pack/junegunn/start/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Unicode	pack/junegunn/start/fzf/src/options.go	/^	Unicode     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
UnimpairedMapTransform	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! UnimpairedMapTransform(algorithm, key) abort$/;"	f
Unlink	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -bang Unlink$/;"	c
Unlock	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	pack/junegunn/start/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger, reset bool) {$/;"	f	struct:fzf.Terminal
UpdateProgress	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	pack/junegunn/start/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	pack/junegunn/start/fzf/README.md	/^Upgrading fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	pack/junegunn/start/fzf/README.md	/^Usage$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Using Homebrew	pack/junegunn/start/fzf/README.md	/^### Using Homebrew$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Linux package managers	pack/junegunn/start/fzf/README.md	/^### Using Linux package managers$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Makefile	pack/junegunn/start/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	pack/junegunn/start/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using fzf as the secondary filter	pack/junegunn/start/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using git	pack/junegunn/start/fzf/README.md	/^### Using git$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using the finder	pack/junegunn/start/fzf/README.md	/^#### Using the finder$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
VERSION	pack/junegunn/start/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	pack/junegunn/start/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION_REGEX	pack/junegunn/start/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	pack/junegunn/start/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
Variables	pack/andymass/start/vim-matchup/README.md	/^### Variables$/;"	S	section:vim match-up""Options
Version	pack/junegunn/start/fzf/src/options.go	/^	Version     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Vim functions	pack/junegunn/start/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	pack/junegunn/start/fzf/README.md	/^Vim plugin$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
W	mappings.vim	/^command! W execute 'w !sudo tee % > \/dev\/null' <bar> edit!$/;"	c
W	pack/tpope/start/eunuch/plugin/eunuch.vim	/^  command! -bar W Wall$/;"	c
Wait	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
Wall	pack/tpope/start/eunuch/plugin/eunuch.vim	/^command! -bar -nargs=? Wall$/;"	c
Watch	pack/junegunn/start/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
What?	pack/ludovicchabant/start/vim-gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Why you should use fzf on Vim	pack/junegunn/start/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	pack/ludovicchabant/start/vim-gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Width	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	pack/junegunn/start/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	pack/junegunn/start/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows	pack/junegunn/start/fzf/README.md	/^### Windows$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
WithAttr	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	pack/junegunn/start/fzf/src/options.go	/^	WithNth     []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
WriteBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^    command! -buffer -nargs=0 WriteBookmarks call g:NERDTreeBookmark.Write()$/;"	c
Writing	pack/ludovicchabant/start/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	pack/junegunn/start/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	pack/junegunn/start/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
Y	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	pack/junegunn/start/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	pack/junegunn/start/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
[License](LICENSE)	pack/junegunn/start/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	pack/junegunn/start/fzf/README.md	/^[License](LICENSE)$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
\\	mappings.vim	/^noremap \\ ,$/;"	m
]	pack/junegunn/start/fzf/shell/completion.bash	/^  if [ "$(type -t _fzf_comprun 2>&1)" = function ]; then$/;"	f
]]	pack/junegunn/start/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
___emmet_setup___	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^augroup ___emmet_setup___$/;"	a
__fsel	pack/junegunn/start/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	pack/junegunn/start/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	pack/junegunn/start/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	pack/junegunn/start/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defc	pack/junegunn/start/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	pack/junegunn/start/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	pack/junegunn/start/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	pack/junegunn/start/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	pack/junegunn/start/fzf/shell/key-bindings.bash	/^__fzf_history__() {$/;"	f
__fzf_orig_completion	pack/junegunn/start/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_select__	pack/junegunn/start/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	pack/junegunn/start/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	pack/junegunn/start/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
_cache	pack/junegunn/start/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf	typeref:typename:ChunkCache
_colorToAttribute	pack/junegunn/start/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_fzf_alias_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_compgen_dir	pack/junegunn/start/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	pack/junegunn/start/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	pack/junegunn/start/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	pack/junegunn/start/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	pack/junegunn/start/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	pack/junegunn/start/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_node_id	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^local function _node_id(node)$/;"	f
_patternCache	pack/junegunn/start/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf	typeref:typename:map[string]*Pattern
_screen	pack/junegunn/start/fzf/src/tui/tcell.go	/^	_screen tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_splitRegex	pack/junegunn/start/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
`--filter` will not block when sort is disabled	pack/junegunn/start/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t	subsection:CHANGELOG""0.9.4""Improvements
`--height`	pack/junegunn/start/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Screen Layout
`:FZF[!]`	pack/junegunn/start/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`fzf#run`	pack/junegunn/start/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	pack/junegunn/start/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`fzf-tmux`	pack/junegunn/start/fzf/ADVANCED.md	/^### `fzf-tmux`$/;"	S	section:Advanced fzf examples""Screen Layout
`fzf-tmux` script	pack/junegunn/start/fzf/README.md	/^`fzf-tmux` script$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
a	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let a = " if   endif "$/;"	v
a	pack/andymass/start/vim-matchup/test/issues/51/test.f90	/^   integer :: a /;"	v	program:ifElseIfElseProg
a	pack/andymass/start/vim-matchup/test/issues/63/test.f90	/^  real/;"	v	program:matchup_parsing
a	pack/junegunn/start/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
actAbort	pack/junegunn/start/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	pack/junegunn/start/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	pack/junegunn/start/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	pack/junegunn/start/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	pack/junegunn/start/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEOF	pack/junegunn/start/fzf/src/terminal.go	/^	actBackwardDeleteCharEOF$/;"	c	package:fzf
actBackwardKillWord	pack/junegunn/start/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	pack/junegunn/start/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBeginningOfLine	pack/junegunn/start/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	pack/junegunn/start/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangePrompt	pack/junegunn/start/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actClearQuery	pack/junegunn/start/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	pack/junegunn/start/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	pack/junegunn/start/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClose	pack/junegunn/start/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	pack/junegunn/start/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	pack/junegunn/start/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselect	pack/junegunn/start/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	pack/junegunn/start/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	pack/junegunn/start/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	pack/junegunn/start/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	pack/junegunn/start/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	pack/junegunn/start/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	pack/junegunn/start/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	pack/junegunn/start/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	pack/junegunn/start/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFirst	pack/junegunn/start/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	pack/junegunn/start/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	pack/junegunn/start/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	pack/junegunn/start/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	pack/junegunn/start/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actIgnore	pack/junegunn/start/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	pack/junegunn/start/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	pack/junegunn/start/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	pack/junegunn/start/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	pack/junegunn/start/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	pack/junegunn/start/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	pack/junegunn/start/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	pack/junegunn/start/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	pack/junegunn/start/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actPageDown	pack/junegunn/start/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	pack/junegunn/start/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPreview	pack/junegunn/start/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPreviousHistory	pack/junegunn/start/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c	package:fzf
actPrintQuery	pack/junegunn/start/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actRefreshPreview	pack/junegunn/start/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	pack/junegunn/start/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReplaceQuery	pack/junegunn/start/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	pack/junegunn/start/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelect	pack/junegunn/start/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	pack/junegunn/start/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actSigStop	pack/junegunn/start/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	pack/junegunn/start/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	pack/junegunn/start/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	pack/junegunn/start/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	pack/junegunn/start/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actUnbind	pack/junegunn/start/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	pack/junegunn/start/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	pack/junegunn/start/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	pack/junegunn/start/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	pack/junegunn/start/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	pack/junegunn/start/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionType	pack/junegunn/start/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activeTempFiles	pack/junegunn/start/fzf/src/terminal.go	/^var activeTempFiles []string$/;"	v	package:fzf	typeref:typename:[]string
after/*.vim	pack/andymass/start/vim-matchup/.projections.json	/^  "after\/*.vim": {"type": "after"},$/;"	o
algo	pack/junegunn/start/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	pack/junegunn/start/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	pack/junegunn/start/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	pack/junegunn/start/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
all	pack/mattn/start/emmet-vim/Makefile	/^all : emmet-vim.zip$/;"	t
alloc16	pack/junegunn/start/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	pack/junegunn/start/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
another_function	pack/andymass/start/vim-matchup/test/issues/3/test.sql	/^create or replace function another_function()$/;"	f
ansi	pack/junegunn/start/fzf/src/terminal.go	/^	ansi         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	pack/junegunn/start/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38;5;81mbpf\//;"	c	package:fzf
ansiOffset	pack/junegunn/start/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexRefence	pack/junegunn/start/fzf/src/ansi_test.go	/^var ansiRegexRefence = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;]*[a-zA-Z@]|\\x1b][0-9];[[:prin/;"	v	package:fzf
ansiState	pack/junegunn/start/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
any_include?	pack/junegunn/start/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
append	pack/junegunn/start/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
append_line	pack/junegunn/start/fzf/install	/^append_line() {$/;"	f
args=	pack/junegunn/start/fzf/bin/fzf-tmux	/^      args=()$/;"	f
args=	pack/junegunn/start/fzf/bin/fzf-tmux	/^args=()$/;"	f
args=	pack/junegunn/start/fzf/shell/completion.bash	/^    args=()$/;"	f
args=	pack/junegunn/start/fzf/shell/completion.zsh	/^    args=()$/;"	f
asciiFuzzyIndex	pack/junegunn/start/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo	typeref:typename:int
ask	pack/junegunn/start/fzf/install	/^ask() {$/;"	f
ask	pack/junegunn/start/fzf/uninstall	/^ask() {$/;"	f
assert	pack/junegunn/start/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assertMatch	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	pack/junegunn/start/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
at	pack/junegunn/start/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atof	pack/junegunn/start/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf	typeref:typename:float64
atoi	pack/junegunn/start/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf	typeref:typename:int
atoi	pack/junegunn/start/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	pack/junegunn/start/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	pack/junegunn/start/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attrCodes	pack/junegunn/start/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
autoload/*.vim	pack/andymass/start/vim-matchup/.projections.json	/^  "autoload\/*.vim": {"type": "autoload"},$/;"	o
awkBlack	pack/junegunn/start/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	pack/junegunn/start/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	pack/junegunn/start/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	pack/junegunn/start/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
b	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let b = '\\(  \\)'$/;"	v
b:AutoPairs	ftplugin/eruby.vim	/^let b:AutoPairs = AutoPairsDefine({ '<%': '%>', '|': '|', '<%=': '%>' })$/;"	v
b:AutoPairs	ftplugin/ruby.vim	/^let b:AutoPairs = AutoPairsDefine({ '|': '|' })$/;"	v
b:AutoPairs	ftplugin/tex.vim	/^let b:AutoPairs = AutoPairsDefine({ '$': '$' })$/;"	v
b:current_syntax	pack/tpope/start/fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	pack/tpope/start/fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:did_ftplugin	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	pack/tpope/start/fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:match_ignorecase	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_midmap	pack/andymass/start/vim-matchup/after/ftplugin/lua_matchup.vim	/^let b:match_midmap = [$/;"	v
b:match_midmap	pack/andymass/start/vim-matchup/after/ftplugin/ruby_matchup.vim	/^let b:match_midmap = [$/;"	v
b:match_skip	pack/andymass/start/vim-matchup/after/ftplugin/typescriptreact_matchup.vim	/^let b:match_skip = 's:\\%(comment\\|string\\)\\%(tsxCloseString\\)\\@<!'$/;"	v
b:match_skip	pack/andymass/start/vim-matchup/after/ftplugin/vim_matchup.vim	/^let b:match_skip = 's:comment\\|string\\|vimSynReg'$/;"	v
b:match_skip	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name")$/;"	v
b:match_words	pack/andymass/start/vim-matchup/after/ftplugin/vim_matchup.vim	/^  let b:match_words$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',< highlight \\(\\w\\+\\)\\g{hlend} | but not this >\\ze no cursor:< mid/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\%(end\\)\\@<!むめ:endむめも'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\<baz\\zebar\\>:\\<barbaz\\>'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\<where\\>:\\<wh\\zeen\\>'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\<zab\\zsrab\\>:\\<rabzab\\>'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\\\begin{\\([^}]\\+\\)}:\\\\end{\\1}'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',\\\\word{\\(.\\{-}\\)}:\\\\endword{\\1}'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',muopen:mumidone:mumidtwo:mumidthree:muclose'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',one😀🐑one:two😐🐑two:three🙁🐑'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',op\\ten:mi\\td:cl\\tose'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',so👔me\\zething:t\\t👕t\\zemid:e👖\\te\\zeend'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words .= ',ぽ:も'$/;"	v
b:match_words	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^  let b:match_words = '\\<\\(\\(foo\\)\\(bar\\)\\):\\3\\2:end\\1'$/;"	v
b:matchup_matchparen_enabled	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^    let b:matchup_matchparen_enabled = 0$/;"	v
b:matchup_matchparen_fallback	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^    let b:matchup_matchparen_fallback = 0$/;"	v
b:matchup_matchparen_timeout	pack/andymass/start/vim-matchup/after/ftplugin/ocaml_matchup.vim	/^let b:matchup_matchparen_timeout=100$/;"	v
b:undo_ftplugin	pack/andymass/start/vim-matchup/after/ftplugin/lua_matchup.vim	/^let b:undo_ftplugin .= '| unlet! b:match_midmap'$/;"	v
b:undo_ftplugin	pack/andymass/start/vim-matchup/after/ftplugin/ocaml_matchup.vim	/^let b:undo_ftplugin .= ' | unlet! b:matchup_matchparen_timeout'$/;"	v
b:undo_ftplugin	pack/andymass/start/vim-matchup/after/ftplugin/ruby_matchup.vim	/^  let b:undo_ftplugin .= '|unlet! b:match_midmap'$/;"	v
bash	pack/junegunn/start/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
basicMatch	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
begin	pack/junegunn/start/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	pack/junegunn/start/fzf/Makefile	/^bench:$/;"	t
bg	pack/junegunn/start/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	pack/junegunn/start/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	pack/junegunn/start/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin/fzf	pack/junegunn/start/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
bonusAt	pack/junegunn/start/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	pack/junegunn/start/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusCamel123	pack/junegunn/start/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtention$/;"	c	package:algo
bonusConsecutive	pack/junegunn/start/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtention)$/;"	c	package:algo
bonusFirstCharMultiplier	pack/junegunn/start/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	pack/junegunn/start/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusNonWord	pack/junegunn/start/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	pack/junegunn/start/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	pack/junegunn/start/fzf/src/terminal.go	/^	border       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	pack/junegunn/start/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderShape	pack/junegunn/start/fzf/src/terminal.go	/^	borderShape  tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	pack/junegunn/start/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
bottomLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
buffer	pack/junegunn/start/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
build	pack/junegunn/start/fzf/Makefile	/^build:$/;"	t
buildCacheKey	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	pack/junegunn/start/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPlusList	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	pack/junegunn/start/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
byBegin	pack/junegunn/start/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byEnd	pack/junegunn/start/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	pack/junegunn/start/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	pack/junegunn/start/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	pack/junegunn/start/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
c	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let c = "\\\\(  \\\\)"$/;"	v
c#	mappings.vim	/^nnoremap c# ?\\<<C-r>=expand('<cword>')<cr>\\>\\C<cr>``cgN$/;"	m
c*	mappings.vim	/^nnoremap c* \/\\<<C-r>=expand('<cword>')<cr>\\>\\C<cr>``cgn$/;"	m
cS	pack/tpope/start/surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache	pack/junegunn/start/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cacheKey	pack/junegunn/start/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	pack/junegunn/start/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	pack/junegunn/start/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateScore	pack/junegunn/start/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	pack/junegunn/start/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f	package:fzf	typeref:typename:int
cancelPreview	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
capture	pack/junegunn/start/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
caseSensitive	pack/junegunn/start/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	pack/junegunn/start/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
cgc	pack/tpope/start/commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
charClass	pack/junegunn/start/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	pack/junegunn/start/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfAscii	pack/junegunn/start/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	pack/junegunn/start/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charLetter	pack/junegunn/start/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	pack/junegunn/start/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	pack/junegunn/start/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c	package:algo	typeref:type:charClass
charNumber	pack/junegunn/start/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	pack/junegunn/start/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
checkAscii	pack/junegunn/start/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
check_binary	pack/junegunn/start/fzf/install	/^check_binary() {$/;"	f
check_binary	pack/junegunn/start/fzf/install.ps1	/^function check_binary () {$/;"	f
chunkSize	pack/junegunn/start/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	pack/junegunn/start/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	pack/junegunn/start/fzf/src/matcher.go	/^	chunks     []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	pack/junegunn/start/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
clean	pack/junegunn/start/fzf/Makefile	/^clean:$/;"	t
cleanExit	pack/junegunn/start/fzf/src/terminal.go	/^	cleanExit    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanTemporaryFiles	pack/junegunn/start/fzf/src/terminal.go	/^func cleanTemporaryFiles() {$/;"	f	package:fzf
cleanse	pack/junegunn/start/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	pack/junegunn/start/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearCache	pack/junegunn/start/fzf/src/matcher.go	/^	clearCache bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
clearChunkCache	pack/junegunn/start/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearCode	pack/junegunn/start/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearOnExit	pack/junegunn/start/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clearPatternCache	pack/junegunn/start/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clickY	pack/junegunn/start/fzf/src/tui/light.go	/^	clickY        []int$/;"	m	struct:tui.LightRenderer	typeref:typename:[]int
clickY	pack/junegunn/start/fzf/src/tui/tui.go	/^	clickY       []int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[]int
closePlatform	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
co	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^  nmap <silent><expr> co <SID>legacy_option_map(nr2char(getchar()))$/;"	m
colBlack	pack/junegunn/start/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	pack/junegunn/start/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	pack/junegunn/start/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	pack/junegunn/start/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	pack/junegunn/start/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	pack/junegunn/start/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	pack/junegunn/start/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	pack/junegunn/start/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	pack/junegunn/start/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	pack/junegunn/start/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	pack/junegunn/start/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	pack/junegunn/start/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	pack/junegunn/start/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
colorCodes	pack/junegunn/start/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	pack/junegunn/start/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	pack/junegunn/start/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.Col/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	pack/junegunn/start/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	pack/junegunn/start/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	pack/junegunn/start/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
command	pack/junegunn/start/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	pack/junegunn/start/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	pack/junegunn/start/fzf/src/terminal.go	/^	command *string$/;"	m	struct:fzf.searchRequest	typeref:typename:*string
commentary.vim	pack/tpope/start/commentary/README.markdown	/^# commentary.vim$/;"	c
compareRanks	pack/junegunn/start/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	pack/junegunn/start/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
cond	pack/junegunn/start/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
consoleDevice	pack/junegunn/start/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
consoleFlagsInput	pack/junegunn/start/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	pack/junegunn/start/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
convertBoolToInt32	pack/junegunn/start/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
coordinatorDelayMax	pack/junegunn/start/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	pack/junegunn/start/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
cop	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^  nnoremap cop <Nop>$/;"	m
copySlice	pack/junegunn/start/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
count	pack/junegunn/start/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	pack/junegunn/start/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	pack/junegunn/start/fzf/src/terminal.go	/^	count        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	pack/junegunn/start/fzf/test/test_go.rb	/^          def counts$/;"	f	method:Tmux.until
coverage	pack/andymass/start/vim-matchup/test/new/Makefile	/^coverage: htmlcov\/index.html$/;"	t
cprint2	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
create_file	pack/junegunn/start/fzf/install	/^create_file() {$/;"	f
criterion	pack/junegunn/start/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
cs	pack/tpope/start/surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
csi	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	struct:tui.LightWindow
csiColor	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
current	pack/junegunn/start/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	pack/junegunn/start/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentItem	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
cursor	pack/junegunn/start/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursors	pack/junegunn/start/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cut	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function cut(tuple)$/;"	f
cx	pack/junegunn/start/fzf/src/terminal.go	/^	cx           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	pack/junegunn/start/fzf/src/terminal.go	/^	cy           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cycle	pack/junegunn/start/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	pack/junegunn/start/fzf/src/terminal.go	/^	cycle        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
d	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let d = "( \\\\(  )"  .  "\\\\(  " . '\\(  \\)' . "\\\\)"$/;"	v
d#	mappings.vim	/^nnoremap d# ?\\<<C-r>=expand('<cword>')<cr>\\>\\C<cr>``dgN$/;"	m
d*	mappings.vim	/^nnoremap d* \/\\<<C-r>=expand('<cword>')<cr>\\>\\C<cr>``dgn$/;"	m
days_in_month	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^    def days_in_month(month, year)$/;"	S	class:Time
debugV2	pack/junegunn/start/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
defaultCommand	pack/junegunn/start/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf	typeref:typename:string
defaultEscDelay	pack/junegunn/start/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	pack/junegunn/start/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	pack/junegunn/start/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultJumpLabels	pack/junegunn/start/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	pack/junegunn/start/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]action
defaultMargin	pack/junegunn/start/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	pack/junegunn/start/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	pack/junegunn/start/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultTheme	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultWidth	pack/junegunn/start/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
deferred highlighting	pack/andymass/start/vim-matchup/README.md	/^#### deferred highlighting$/;"	t	subsection:vim match-up""Options""Module matchparen
del	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function del(key, tuple)$/;"	f
delChar	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delete	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function delete(_, key)$/;"	f
delimNil	pack/junegunn/start/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimiter	pack/junegunn/start/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	pack/junegunn/start/fzf/src/terminal.go	/^	delimiter    Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiterRegexp	pack/junegunn/start/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
deselectItem	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
devPrefixes	pack/junegunn/start/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
displayWidth	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	pack/junegunn/start/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
doc/*.txt	pack/andymass/start/vim-matchup/.projections.json	/^  "doc\/*.txt": {"type": "doc"},$/;"	o
docker	pack/junegunn/start/fzf/Makefile	/^docker:$/;"	t
docker-test	pack/junegunn/start/fzf/Makefile	/^docker-test:$/;"	t
doubleClickDuration	pack/junegunn/start/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	pack/junegunn/start/fzf/install	/^download() {$/;"	f
download	pack/junegunn/start/fzf/install.ps1	/^function download {$/;"	f
drawBorder	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f	struct:tui.LightWindow
drawBorder	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder() {$/;"	f	struct:tui.TcellWindow
drawBorderAround	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
ds	pack/tpope/start/surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dummy	pack/andymass/start/vim-matchup/test/issues/3/test.sql	/^create or replace function dummy()$/;"	f
dupeTheme	pack/junegunn/start/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
eachLine	pack/junegunn/start/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
ellipsis	pack/junegunn/start/fzf/src/terminal.go	/^const ellipsis string = ".."$/;"	c	package:fzf	typeref:typename:string
emmet#anchorizeURL	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#anchorizeURL(flag) abort$/;"	f
emmet#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#balanceTag(flag) range abort$/;"	f
emmet#codePretty	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#codePretty() range abort$/;"	f
emmet#completeTag	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#completeTag(findstart, base) abort$/;"	f
emmet#expandAbbr	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbr(mode, abbr) range abort$/;"	f
emmet#expandAbbrIntelligent	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#expandAbbrIntelligent(feedkey) abort$/;"	f
emmet#expandCursorExpr	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#expandCursorExpr(expand, mode) abort$/;"	f
emmet#expandDollarExpr	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#expandDollarExpr(expand) abort$/;"	f
emmet#expandWord	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#expandWord(abbr, type, orig) abort$/;"	f
emmet#getBaseType	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getBaseType(type) abort$/;"	f
emmet#getDollarExprs	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarExprs(expand) abort$/;"	f
emmet#getDollarValueByKey	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getDollarValueByKey(key) abort$/;"	f
emmet#getExpandos	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getExpandos(type, key) abort$/;"	f
emmet#getFileType	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getFileType(...) abort$/;"	f
emmet#getFilters	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getFilters(type) abort$/;"	f
emmet#getIndentation	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getIndentation(...) abort$/;"	f
emmet#getResource	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getResource(type, name, default) abort$/;"	f
emmet#getSettings	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getSettings() abort$/;"	f
emmet#getSnippets	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#getSnippets(type) abort$/;"	f
emmet#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#imageEncode() abort$/;"	f
emmet#imageSize	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#imageSize() abort$/;"	f
emmet#isExpandable	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#isExpandable() abort$/;"	f
emmet#isExtends	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#isExtends(type, extend) abort$/;"	f
emmet#lang#css#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#balanceTag(flag) range abort$/;"	f
emmet#lang#css#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#findTokens(str) abort$/;"	f
emmet#lang#css#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageEncode() abort$/;"	f
emmet#lang#css#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#imageSize() abort$/;"	f
emmet#lang#css#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#mergeLines() abort$/;"	f
emmet#lang#css#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrev(flag) abort$/;"	f
emmet#lang#css#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#css#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#css#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#parseTag(tag) abort$/;"	f
emmet#lang#css#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#removeTag() abort$/;"	f
emmet#lang#css#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#splitJoinTag() abort$/;"	f
emmet#lang#css#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toString(settings, current, type, inline, filters, itemno, indent) abor/;"	f
emmet#lang#css#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/css.vim	/^function! emmet#lang#css#toggleComment() abort$/;"	f
emmet#lang#elm#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#balanceTag(flag) range abort$/;"	f
emmet#lang#elm#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#findTokens(str) abort$/;"	f
emmet#lang#elm#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#imageEncode() abort$/;"	f
emmet#lang#elm#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#mergeLines() abort$/;"	f
emmet#lang#elm#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrev(flag) abort$/;"	f
emmet#lang#elm#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#elm#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#elm#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#parseTag(tag) abort$/;"	f
emmet#lang#elm#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#removeTag() abort$/;"	f
emmet#lang#elm#renderNode	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderNode(node)$/;"	f
emmet#lang#elm#renderParam	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#renderParam(param)$/;"	f
emmet#lang#elm#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#splitJoinTag() abort$/;"	f
emmet#lang#elm#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toString(settings, current, type, inline, filters, itemno, indent) abor/;"	f
emmet#lang#elm#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/elm.vim	/^function! emmet#lang#elm#toggleComment() abort$/;"	f
emmet#lang#exists	pack/mattn/start/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#exists(type) abort$/;"	f
emmet#lang#getExtends	pack/mattn/start/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#getExtends(type) abort$/;"	f
emmet#lang#haml#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#balanceTag(flag) range abort$/;"	f
emmet#lang#haml#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#findTokens(str) abort$/;"	f
emmet#lang#haml#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageEncode() abort$/;"	f
emmet#lang#haml#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#imageSize() abort$/;"	f
emmet#lang#haml#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#mergeLines() abort$/;"	f
emmet#lang#haml#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrev(flag) abort$/;"	f
emmet#lang#haml#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#haml#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#haml#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#parseTag(tag) abort$/;"	f
emmet#lang#haml#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#removeTag() abort$/;"	f
emmet#lang#haml#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#splitJoinTag() abort$/;"	f
emmet#lang#haml#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#haml#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/haml.vim	/^function! emmet#lang#haml#toggleComment() abort$/;"	f
emmet#lang#html#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#balanceTag(flag) range abort$/;"	f
emmet#lang#html#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#findTokens(str) abort$/;"	f
emmet#lang#html#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageEncode() abort$/;"	f
emmet#lang#html#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#imageSize() abort$/;"	f
emmet#lang#html#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#mergeLines() abort$/;"	f
emmet#lang#html#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrev(flag) abort$/;"	f
emmet#lang#html#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#html#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#html#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#parseTag(tag) abort$/;"	f
emmet#lang#html#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#removeTag() abort$/;"	f
emmet#lang#html#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#splitJoinTag() abort$/;"	f
emmet#lang#html#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#html#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! emmet#lang#html#toggleComment() abort$/;"	f
emmet#lang#jade#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#balanceTag(flag) range abort$/;"	f
emmet#lang#jade#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#findTokens(str) abort$/;"	f
emmet#lang#jade#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageEncode() abort$/;"	f
emmet#lang#jade#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#imageSize() abort$/;"	f
emmet#lang#jade#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#mergeLines() abort$/;"	f
emmet#lang#jade#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrev(flag) abort$/;"	f
emmet#lang#jade#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#jade#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#jade#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#parseTag(tag) abort$/;"	f
emmet#lang#jade#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#removeTag() abort$/;"	f
emmet#lang#jade#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#splitJoinTag() abort$/;"	f
emmet#lang#jade#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#jade#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/jade.vim	/^function! emmet#lang#jade#toggleComment() abort$/;"	f
emmet#lang#less#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#balanceTag(flag) range abort$/;"	f
emmet#lang#less#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#findTokens(str) abort$/;"	f
emmet#lang#less#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageEncode() abort$/;"	f
emmet#lang#less#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#imageSize() abort$/;"	f
emmet#lang#less#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#mergeLines() abort$/;"	f
emmet#lang#less#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrev(flag) abort$/;"	f
emmet#lang#less#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#less#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#less#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#parseTag(tag) abort$/;"	f
emmet#lang#less#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#removeTag() abort$/;"	f
emmet#lang#less#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#splitJoinTag() abort$/;"	f
emmet#lang#less#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#less#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/less.vim	/^function! emmet#lang#less#toggleComment() abort$/;"	f
emmet#lang#sass#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#balanceTag(flag) range abort$/;"	f
emmet#lang#sass#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#findTokens(str) abort$/;"	f
emmet#lang#sass#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageEncode() abort$/;"	f
emmet#lang#sass#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#imageSize() abort$/;"	f
emmet#lang#sass#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#mergeLines() abort$/;"	f
emmet#lang#sass#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrev(flag) abort$/;"	f
emmet#lang#sass#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#sass#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#sass#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#parseTag(tag) abort$/;"	f
emmet#lang#sass#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#removeTag() abort$/;"	f
emmet#lang#sass#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#splitJoinTag() abort$/;"	f
emmet#lang#sass#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#sass#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/sass.vim	/^function! emmet#lang#sass#toggleComment() abort$/;"	f
emmet#lang#scss#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#balanceTag(flag) range abort$/;"	f
emmet#lang#scss#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#findTokens(str) abort$/;"	f
emmet#lang#scss#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageEncode() abort$/;"	f
emmet#lang#scss#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#imageSize() abort$/;"	f
emmet#lang#scss#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#mergeLines() abort$/;"	f
emmet#lang#scss#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrev(flag) abort$/;"	f
emmet#lang#scss#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#scss#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#scss#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#parseTag(tag) abort$/;"	f
emmet#lang#scss#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#removeTag() abort$/;"	f
emmet#lang#scss#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#splitJoinTag() abort$/;"	f
emmet#lang#scss#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#scss#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/scss.vim	/^function! emmet#lang#scss#toggleComment() abort$/;"	f
emmet#lang#slim#balanceTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#balanceTag(flag) range abort$/;"	f
emmet#lang#slim#findTokens	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#findTokens(str) abort$/;"	f
emmet#lang#slim#imageEncode	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageEncode() abort$/;"	f
emmet#lang#slim#imageSize	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#imageSize() abort$/;"	f
emmet#lang#slim#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#mergeLines() abort$/;"	f
emmet#lang#slim#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrev(flag) abort$/;"	f
emmet#lang#slim#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#moveNextPrevItem(flag) abort$/;"	f
emmet#lang#slim#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseIntoTree(abbr, type) abort$/;"	f
emmet#lang#slim#parseTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#parseTag(tag) abort$/;"	f
emmet#lang#slim#removeTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#removeTag() abort$/;"	f
emmet#lang#slim#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#splitJoinTag() abort$/;"	f
emmet#lang#slim#toString	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toString(settings, current, type, inline, filters, itemno, indent) abo/;"	f
emmet#lang#slim#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet/lang/slim.vim	/^function! emmet#lang#slim#toggleComment() abort$/;"	f
emmet#lang#type	pack/mattn/start/emmet-vim/autoload/emmet/lang.vim	/^function! emmet#lang#type(type) abort$/;"	f
emmet#lorem#en#expand	pack/mattn/start/emmet-vim/autoload/emmet/lorem/en.vim	/^function! emmet#lorem#en#expand(command) abort$/;"	f
emmet#lorem#ja#expand	pack/mattn/start/emmet-vim/autoload/emmet/lorem/ja.vim	/^function! emmet#lorem#ja#expand(command) abort$/;"	f
emmet#mergeConfig	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeConfig(lhs, rhs) abort$/;"	f
emmet#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() abort$/;"	f
emmet#mergeLines	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#mergeLines() range abort$/;"	f
emmet#moveNextPrev	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrev(flag) abort$/;"	f
emmet#moveNextPrevItem	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#moveNextPrevItem(flag) abort$/;"	f
emmet#newNode	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#newNode() abort$/;"	f
emmet#parseIntoTree	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#parseIntoTree(abbr, type) abort$/;"	f
emmet#reExpandDollarExpr	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#reExpandDollarExpr(expand, times) abort$/;"	f
emmet#removeTag	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#removeTag() abort$/;"	f
emmet#splitFilterArg	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#splitFilterArg(filters) abort$/;"	f
emmet#splitJoinTag	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#splitJoinTag() abort$/;"	f
emmet#toString	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#toString(...) abort$/;"	f
emmet#toggleComment	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#toggleComment() abort$/;"	f
emmet#unescapeDollarExpr	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#unescapeDollarExpr(expand) abort$/;"	f
emmet#updateTag	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#updateTag() abort$/;"	f
emmet#useFilter	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! emmet#useFilter(filters, filter) abort$/;"	f
emmet#util#cache	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cache(name, ...) abort$/;"	f
emmet#util#closePopup	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#closePopup() abort$/;"	f
emmet#util#cursorInRegion	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#cursorInRegion(region) abort$/;"	f
emmet#util#deleteContent	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#deleteContent(region) abort$/;"	f
emmet#util#getContent	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContent(region) abort$/;"	f
emmet#util#getContentFromURL	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getContentFromURL(url) abort$/;"	f
emmet#util#getImageSize	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getImageSize(fn) abort$/;"	f
emmet#util#getTextFromHTML	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getTextFromHTML(buf) abort$/;"	f
emmet#util#getVisualBlock	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getVisualBlock() abort$/;"	f
emmet#util#getcurpos	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#getcurpos() abort$/;"	f
emmet#util#imageEncodeDecode	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageEncodeDecode(fn, flag) abort$/;"	f
emmet#util#imageSizeWithImageMagick	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#imageSizeWithImageMagick(fn) abort$/;"	f
emmet#util#isImageMagickInstalled	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#isImageMagickInstalled() abort$/;"	f
emmet#util#pointInRegion	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#pointInRegion(point, region) abort$/;"	f
emmet#util#rand	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#rand() abort$/;"	f
emmet#util#regionInRegion	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionInRegion(outer, inner) abort$/;"	f
emmet#util#regionIsValid	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#regionIsValid(region) abort$/;"	f
emmet#util#searchRegion	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#searchRegion(start, end) abort$/;"	f
emmet#util#selectRegion	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#selectRegion(region) abort$/;"	f
emmet#util#setContent	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#setContent(region, content) abort$/;"	f
emmet#util#srand	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#srand(seed) abort$/;"	f
emmet#util#unique	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! emmet#util#unique(arr) abort$/;"	f
emmet-vim.zip	pack/mattn/start/emmet-vim/Makefile	/^emmet-vim.zip: remove-zip$/;"	t
emptyLine	pack/junegunn/start/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
enabled	pack/junegunn/start/fzf/src/terminal.go	/^	enabled    bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
end	pack/junegunn/start/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
endwise	pack/tpope/start/endwise/plugin/endwise.vim	/^augroup endwise " {{{1$/;"	a
endwise.vim	pack/tpope/start/endwise/README.markdown	/^# endwise.vim$/;"	c
env	pack/andymass/start/vim-matchup/test/new/Makefile	/^env: env\/pyvenv.cfg$/;"	t
env/pyvenv.cfg	pack/andymass/start/vim-matchup/test/new/Makefile	/^env\/pyvenv.cfg:$/;"	t
equals	pack/junegunn/start/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
err	pack/junegunn/start/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
errorExit	pack/junegunn/start/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	pack/junegunn/start/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
escDelay	pack/junegunn/start/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	pack/junegunn/start/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escapedColon	pack/junegunn/start/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	pack/junegunn/start/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	pack/junegunn/start/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
eunuch	pack/tpope/start/eunuch/plugin/eunuch.vim	/^augroup eunuch$/;"	a
eunuch.vim	pack/tpope/start/eunuch/README.markdown	/^# eunuch.vim$/;"	c
evaluateScrollOffset	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset(list []*Item, height int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	pack/junegunn/start/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	pack/junegunn/start/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	pack/junegunn/start/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	pack/junegunn/start/fzf/src/terminal.go	/^	eventBox     *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
events	pack/junegunn/start/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
exec	pack/junegunn/start/fzf/src/reader.go	/^	exec     *exec.Cmd$/;"	m	struct:fzf.Reader	typeref:typename:*exec.Cmd
executeCommand	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f	struct:fzf.Terminal
executeRegexp	pack/junegunn/start/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	pack/junegunn/start/fzf/src/terminal.go	/^	executing    *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
exitCancel	pack/junegunn/start/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c	package:fzf
exitError	pack/junegunn/start/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	pack/junegunn/start/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	pack/junegunn/start/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	pack/junegunn/start/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
expect	pack/junegunn/start/fzf/src/terminal.go	/^	expect       map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
extended	pack/junegunn/start/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extension_whitelist	pack/andymass/start/vim-matchup/test/issues/36/image_uploader.rb	/^   def extension_whitelist$/;"	f
extractColor	pack/junegunn/start/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
fail	pack/junegunn/start/fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	pack/junegunn/start/fzf/src/terminal.go	/^	failed       *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
fd	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
fg	pack/junegunn/start/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	pack/junegunn/start/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	pack/junegunn/start/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
file	pack/junegunn/start/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
fill	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	pack/junegunn/start/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fillString	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
filled	pack/junegunn/start/fzf/src/terminal.go	/^	filled   bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
fin	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	pack/junegunn/start/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	pack/junegunn/start/fzf/src/matcher.go	/^	final      bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	pack/junegunn/start/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	pack/junegunn/start/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
findFirstMatch	pack/junegunn/start/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	pack/junegunn/start/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
firstKey	pack/junegunn/start/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
fish	pack/junegunn/start/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
flush	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
focus	pack/junegunn/start/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
follow	pack/junegunn/start/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
following	pack/junegunn/start/fzf/src/terminal.go	/^	following  bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
forceBlack	pack/junegunn/start/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	pack/junegunn/start/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
forward	pack/junegunn/start/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fugitive	pack/tpope/start/fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BlameComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#ConfigGetAll	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetAll(name, ...) abort$/;"	f
fugitive#ConfigGetRegexp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ConfigGetRegexp(pattern, ...) abort$/;"	f
fugitive#Cwindow	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#DiffClose	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#PagerFor	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvGitArgv	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitArgv(...) abort$/;"	f
fugitive#PullComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveRemote	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveRemote(remote) abort$/;"	f
fugitive#Result	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#SourceCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshHostAlias	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(...) abort$/;"	f
fugitive#StatusCfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	pack/tpope/start/fugitive/README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	pack/tpope/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	pack/tpope/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_job	pack/tpope/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	pack/tpope/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fullscreen	pack/junegunn/start/fzf/src/terminal.go	/^	fullscreen   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	pack/junegunn/start/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
fuzzy	pack/junegunn/start/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	pack/junegunn/start/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fzf	pack/junegunn/start/fzf/man/man1/fzf.1	/^.TH fzf 1 "Jun 2021" "fzf 0.27.2" "fzf - a command-line fuzzy finder"$/;"	t
fzf	pack/junegunn/start/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/cache.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/constants.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/core.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/history.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/item.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/merger.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/options.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/reader.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/result.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	pack/junegunn/start/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	pack/junegunn/start/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	pack/junegunn/start/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	pack/junegunn/start/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	pack/junegunn/start/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	pack/junegunn/start/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	pack/junegunn/start/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	pack/junegunn/start/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	pack/junegunn/start/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-tmux	pack/junegunn/start/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Jun 2021" "fzf 0.27.2" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	pack/junegunn/start/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_base	pack/junegunn/start/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	pack/junegunn/start/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	pack/junegunn/start/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g:	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^    let g:[a:option] = a:default$/;"	v
g:	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:	pack/mattn/start/emmet-vim/unittest.vim	/^            let g:[opt] = oldoptions[opt]$/;"	v
g:	pack/mattn/start/emmet-vim/unittest.vim	/^          let g:[opt] = options[opt]$/;"	v
g:AutoPairs	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '```':'```', '"""':'"""', "'''":/;"	v
g:AutoPairsCenterLine	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsCenterLine = 1$/;"	v
g:AutoPairsFlyMode	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsFlyMode = 0$/;"	v
g:AutoPairsLoaded	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^let g:AutoPairsLoaded = 1$/;"	v
g:AutoPairsMapBS	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapBS = 1$/;"	v
g:AutoPairsMapCR	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCR = 1$/;"	v
g:AutoPairsMapCh	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapCh = 1$/;"	v
g:AutoPairsMapSpace	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMapSpace = 1$/;"	v
g:AutoPairsMoveCharacter	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMoveCharacter = "()[]{}\\"'"$/;"	v
g:AutoPairsMultilineClose	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsMultilineClose = 1$/;"	v
g:AutoPairsShortcutBackInsert	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutBackInsert = '<M-b>'$/;"	v
g:AutoPairsShortcutFastWrap	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutFastWrap = '<M-e>'$/;"	v
g:AutoPairsShortcutJump	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutJump = '<M-n>'$/;"	v
g:AutoPairsShortcutToggle	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsShortcutToggle = '<M-p>'$/;"	v
g:AutoPairsSmartQuotes	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsSmartQuotes = 1$/;"	v
g:AutoPairsWildClosedPair	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let g:AutoPairsWildClosedPair = ''$/;"	v
g:NERDTree	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let g:NERDTree = s:NERDTree$/;"	v
g:NERDTreeAutoCenter	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenter            = get(g:, 'NERDTreeAutoCenter',            1)$/;"	v
g:NERDTreeAutoCenterThreshold	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeAutoCenterThreshold   = get(g:, 'NERDTreeAutoCenterThreshold',   3)$/;"	v
g:NERDTreeAutoDeleteBuffer	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^    let g:NERDTreeAutoDeleteBuffer = 0$/;"	v
g:NERDTreeBookmark	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeBookmarks = []$/;"	v
g:NERDTreeBookmarksFile	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksFile         = get(g:, 'NERDTreeBookmarksFile',         expand('$HOME') ./;"	v
g:NERDTreeBookmarksSort	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmarksSort         = get(g:, 'NERDTreeBookmarksSort',         1)$/;"	v
g:NERDTreeCascadeOpenSingleChildDir	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeOpenSingleChildDir = get(g:, 'NERDTreeCascadeOpenSingleChildDir', 1)$/;"	v
g:NERDTreeCascadeSingleChildDir	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCascadeSingleChildDir     = get(g:, 'NERDTreeCascadeSingleChildDir',     1)$/;"	v
g:NERDTreeCaseSensitiveSort	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCaseSensitiveSort     = get(g:, 'NERDTreeCaseSensitiveSort',     0)$/;"	v
g:NERDTreeChDirMode	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeChDirMode             = get(g:, 'NERDTreeChDirMode',             0)$/;"	v
g:NERDTreeCopyCmd	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyCmd      = get(g:, 'NERDTreeCopyCmd',      'cp -r ')$/;"	v
g:NERDTreeCopyDirCmd	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyDirCmd   = get(g:, 'NERDTreeCopyDirCmd',   'xcopy \/s \/e \/i \/y \/q ')$/;"	v
g:NERDTreeCopyFileCmd	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeCopyFileCmd  = get(g:, 'NERDTreeCopyFileCmd',  'copy \/y ')$/;"	v
g:NERDTreeCreatePrefix	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeCreatePrefix          = get(g:, 'NERDTreeCreatePrefix',          'silent')$/;"	v
g:NERDTreeCreator	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^let g:NERDTreeCreator = s:Creator$/;"	v
g:NERDTreeCustomOpenArgs	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = get(g:, 'NERDTreeCustomOpenArgs', {})$/;"	v
g:NERDTreeCustomOpenArgs	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^        let g:NERDTreeCustomOpenArgs = l:defaultOpenArgs$/;"	v
g:NERDTreeDirArrowCollapsible	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '~')$/;"	v
g:NERDTreeDirArrowCollapsible	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowCollapsible = get(g:, 'NERDTreeDirArrowCollapsible', '▾')$/;"	v
g:NERDTreeDirArrowExpandable	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '+')$/;"	v
g:NERDTreeDirArrowExpandable	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeDirArrowExpandable  = get(g:, 'NERDTreeDirArrowExpandable',  '▸')$/;"	v
g:NERDTreeDirNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeEvent	pack/preservim/start/nerdtree/lib/nerdtree/event.vim	/^let g:NERDTreeEvent = s:Event$/;"	v
g:NERDTreeFileNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeFlagSet	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^let g:NERDTreeFlagSet = s:FlagSet$/;"	v
g:NERDTreeGlyphReadOnly	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeGlyphReadOnly = get(g:, 'NERDTreeGlyphReadOnly', 'RO')$/;"	v
g:NERDTreeHighlightCursorline	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHighlightCursorline   = get(g:, 'NERDTreeHighlightCursorline',   1)$/;"	v
g:NERDTreeHijackNetrw	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeHijackNetrw           = get(g:, 'NERDTreeHijackNetrw',           1)$/;"	v
g:NERDTreeIgnore	options.vim	/^let g:NERDTreeIgnore = ['\\.pyc$', '__pycache__', 'node_modules', '.git']$/;"	v
g:NERDTreeIgnore	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeIgnore                = get(g:, 'NERDTreeIgnore',                ['\\~$'])$/;"	v
g:NERDTreeInvalidBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^        let g:NERDTreeInvalidBookmarks = []$/;"	v
g:NERDTreeKeyMap	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^let g:NERDTreeKeyMap = s:KeyMap$/;"	v
g:NERDTreeMapActivateNode	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapActivateNode    = get(g:, 'NERDTreeMapActivateNode',    'o')$/;"	v
g:NERDTreeMapCWD	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCWD             = get(g:, 'NERDTreeMapCWD',             'CD')$/;"	v
g:NERDTreeMapChangeRoot	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChangeRoot      = get(g:, 'NERDTreeMapChangeRoot',      'C')$/;"	v
g:NERDTreeMapChdir	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapChdir           = get(g:, 'NERDTreeMapChdir',           'cd')$/;"	v
g:NERDTreeMapCloseChildren	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseChildren   = get(g:, 'NERDTreeMapCloseChildren',   'X')$/;"	v
g:NERDTreeMapCloseDir	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCloseDir        = get(g:, 'NERDTreeMapCloseDir',        'x')$/;"	v
g:NERDTreeMapCustomOpen	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapCustomOpen      = get(g:, 'NERDTreeMapCustomOpen',      '<CR>')$/;"	v
g:NERDTreeMapDeleteBookmark	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapDeleteBookmark  = get(g:, 'NERDTreeMapDeleteBookmark',  'D')$/;"	v
g:NERDTreeMapHelp	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapHelp            = get(g:, 'NERDTreeMapHelp',            '?')$/;"	v
g:NERDTreeMapJumpFirstChild	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpFirstChild  = get(g:, 'NERDTreeMapJumpFirstChild',  'K')$/;"	v
g:NERDTreeMapJumpLastChild	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpLastChild   = get(g:, 'NERDTreeMapJumpLastChild',   'J')$/;"	v
g:NERDTreeMapJumpNextSibling	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpNextSibling = get(g:, 'NERDTreeMapJumpNextSibling', '<C-j>')$/;"	v
g:NERDTreeMapJumpParent	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpParent      = get(g:, 'NERDTreeMapJumpParent',      'p')$/;"	v
g:NERDTreeMapJumpPrevSibling	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpPrevSibling = get(g:, 'NERDTreeMapJumpPrevSibling', '<C-k>')$/;"	v
g:NERDTreeMapJumpRoot	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapJumpRoot        = get(g:, 'NERDTreeMapJumpRoot',        'P')$/;"	v
g:NERDTreeMapMenu	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapMenu            = get(g:, 'NERDTreeMapMenu',            'm')$/;"	v
g:NERDTreeMapOpenExpl	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenExpl        = get(g:, 'NERDTreeMapOpenExpl',        'e')$/;"	v
g:NERDTreeMapOpenInTab	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTab       = get(g:, 'NERDTreeMapOpenInTab',       't')$/;"	v
g:NERDTreeMapOpenInTabSilent	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenInTabSilent = get(g:, 'NERDTreeMapOpenInTabSilent', 'T')$/;"	v
g:NERDTreeMapOpenRecursively	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenRecursively = get(g:, 'NERDTreeMapOpenRecursively', 'O')$/;"	v
g:NERDTreeMapOpenSplit	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenSplit       = get(g:, 'NERDTreeMapOpenSplit',       'i')$/;"	v
g:NERDTreeMapOpenVSplit	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapOpenVSplit      = get(g:, 'NERDTreeMapOpenVSplit',      's')$/;"	v
g:NERDTreeMapPreview	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreview         = get(g:, 'NERDTreeMapPreview',         'g'.NERDTreeMapActivate/;"	v
g:NERDTreeMapPreviewSplit	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewSplit    = get(g:, 'NERDTreeMapPreviewSplit',    'g'.NERDTreeMapOpenSpli/;"	v
g:NERDTreeMapPreviewVSplit	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapPreviewVSplit   = get(g:, 'NERDTreeMapPreviewVSplit',   'g'.NERDTreeMapOpenVSpl/;"	v
g:NERDTreeMapQuit	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapQuit            = get(g:, 'NERDTreeMapQuit',            'q')$/;"	v
g:NERDTreeMapRefresh	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefresh         = get(g:, 'NERDTreeMapRefresh',         'r')$/;"	v
g:NERDTreeMapRefreshRoot	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapRefreshRoot     = get(g:, 'NERDTreeMapRefreshRoot',     'R')$/;"	v
g:NERDTreeMapToggleBookmarks	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleBookmarks = get(g:, 'NERDTreeMapToggleBookmarks', 'B')$/;"	v
g:NERDTreeMapToggleFiles	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFiles     = get(g:, 'NERDTreeMapToggleFiles',     'F')$/;"	v
g:NERDTreeMapToggleFilters	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleFilters   = get(g:, 'NERDTreeMapToggleFilters',   'f')$/;"	v
g:NERDTreeMapToggleHidden	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleHidden    = get(g:, 'NERDTreeMapToggleHidden',    'I')$/;"	v
g:NERDTreeMapToggleZoom	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapToggleZoom      = get(g:, 'NERDTreeMapToggleZoom',      'A')$/;"	v
g:NERDTreeMapUpdir	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdir           = get(g:, 'NERDTreeMapUpdir',           'u')$/;"	v
g:NERDTreeMapUpdirKeepOpen	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMapUpdirKeepOpen   = get(g:, 'NERDTreeMapUpdirKeepOpen',   'U')$/;"	v
g:NERDTreeMarkBookmarks	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMarkBookmarks         = get(g:, 'NERDTreeMarkBookmarks',         1)$/;"	v
g:NERDTreeMenuController	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let g:NERDTreeMenuController = s:MenuController$/;"	v
g:NERDTreeMenuDown	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuDown           = get(g:, 'NERDTreeMenuDown',           'j')$/;"	v
g:NERDTreeMenuItem	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^let g:NERDTreeMenuItem = s:MenuItem$/;"	v
g:NERDTreeMenuUp	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMenuUp             = get(g:, 'NERDTreeMenuUp',             'k')$/;"	v
g:NERDTreeMinimalMenu	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalMenu           = get(g:, 'NERDTreeMinimalMenu',           0)$/;"	v
g:NERDTreeMinimalUI	options.vim	/^let g:NERDTreeMinimalUI = 1$/;"	v
g:NERDTreeMinimalUI	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMinimalUI             = get(g:, 'NERDTreeMinimalUI',             0)$/;"	v
g:NERDTreeMouseMode	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeMouseMode             = get(g:, 'NERDTreeMouseMode',             1)$/;"	v
g:NERDTreeNaturalSort	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNaturalSort           = get(g:, 'NERDTreeNaturalSort',           0)$/;"	v
g:NERDTreeNodeDelimiter	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00a0")$/;"	v
g:NERDTreeNodeDelimiter	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\u00b7")$/;"	v
g:NERDTreeNodeDelimiter	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeNodeDelimiter = get(g:, 'NERDTreeNodeDelimiter', "\\x07")$/;"	v
g:NERDTreeNotificationThreshold	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeNotificationThreshold = get(g:, 'NERDTreeNotificationThreshold', 100)$/;"	v
g:NERDTreeOldSortOrder	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^    let g:NERDTreeOldSortOrder = g:NERDTreeSortOrder$/;"	v
g:NERDTreeOldSortOrder	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^                let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^        let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOldSortOrder	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeOldSortOrder = []$/;"	v
g:NERDTreeOpener	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^let g:NERDTreeOpener = s:Opener$/;"	v
g:NERDTreePath	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreePathNotifier	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^let g:NERDTreePathNotifier = deepcopy(s:Notifier)$/;"	v
g:NERDTreeQuitOnOpen	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeQuitOnOpen            = get(g:, 'NERDTreeQuitOnOpen',            0)$/;"	v
g:NERDTreeRemoveDirCmd	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rm -rf ')$/;"	v
g:NERDTreeRemoveDirCmd	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeRemoveDirCmd = get(g:, 'NERDTreeRemoveDirCmd', 'rmdir \/s \/q ')$/;"	v
g:NERDTreeRespectWildIgnore	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeRespectWildIgnore     = get(g:, 'NERDTreeRespectWildIgnore',     0)$/;"	v
g:NERDTreeShowBookmarks	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowBookmarks         = get(g:, 'NERDTreeShowBookmarks',         0)$/;"	v
g:NERDTreeShowFiles	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowFiles             = get(g:, 'NERDTreeShowFiles',             1)$/;"	v
g:NERDTreeShowHidden	options.vim	/^let g:NERDTreeShowHidden = 1$/;"	v
g:NERDTreeShowHidden	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowHidden            = get(g:, 'NERDTreeShowHidden',            0)$/;"	v
g:NERDTreeShowLineNumbers	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeShowLineNumbers       = get(g:, 'NERDTreeShowLineNumbers',       0)$/;"	v
g:NERDTreeSortDirs	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortDirs              = get(g:, 'NERDTreeSortDirs',              1)$/;"	v
g:NERDTreeSortHiddenFirst	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortHiddenFirst       = get(g:, 'NERDTreeSortHiddenFirst',       1)$/;"	v
g:NERDTreeSortOrder	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeSortOrder    = get(g:, 'NERDTreeSortOrder', ['\\\/$', '*', '\\.swp$', '\\.bak$', '/;"	v
g:NERDTreeStatusline	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeStatusline = get(g:, 'NERDTreeStatusline', "%{exists('b:NERDTree')?b:NERDTree.root/;"	v
g:NERDTreeUI	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^let g:NERDTreeUI = s:UI$/;"	v
g:NERDTreeUseTCD	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeUseTCD                = get(g:, 'NERDTreeUseTCD',                0)$/;"	v
g:NERDTreeWinPos	options.vim	/^let g:NERDTreeWinPos = "right"$/;"	v
g:NERDTreeWinPos	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinPos  = get(g:, 'NERDTreeWinPos', 'left')$/;"	v
g:NERDTreeWinSize	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeWinSize = get(g:, 'NERDTreeWinSize', 31)$/;"	v
g:__fzf_command	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__gutentags_vim_is_leaving	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_fugitive_last_job	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let g:_fugitive_last_job = a:state$/;"	v
g:autoloaded_fugitive	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:emmet_curl_command	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  let g:emmet_curl_command = 'curl -s -L -A Mozilla\/5.0'$/;"	v
g:emmet_debug	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  let g:emmet_debug = 0$/;"	v
g:emmet_docroot	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  let g:emmet_docroot = {}$/;"	v
g:emmet_html5	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  let g:emmet_html5 = 1$/;"	v
g:fugitive_event	pack/tpope/start/fugitive/autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_result	pack/tpope/start/fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:dir$/;"	v
g:fugitive_summary_format	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf#vim#buffers	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:fzf_action	options.vim	/^let g:fzf_action = {$/;"	v
g:fzf_buffers_jump	options.vim	/^let g:fzf_buffers_jump = 1$/;"	v
g:fzf_commits_log_options	options.vim	/^let g:fzf_commits_log_options = '--graph --color=always'$/;"	v
g:fzf_history_dir	options.vim	/^let g:fzf_history_dir = '~\/.local\/share\/fzf-history'$/;"	v
g:fzf_layout	options.vim	/^let g:fzf_layout = { 'down': '10%' }$/;"	v
g:fzf_tags_command	options.vim	/^let g:fzf_tags_command = 'ctags -R'$/;"	v
g:gutentags_add_ctrlp_root_markers	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	options.vim	/^let g:gutentags_ctags_executable = "\/opt\/homebrew\/Cellar\/universal-ctags\/HEAD-c436bca\/bin\//;"	v
g:gutentags_ctags_executable	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	ftplugin/gitcommit.vim	/^let g:gutentags_enabled=0$/;"	v
g:gutentags_enabled	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:io_fugitive	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:loaded_commentary	pack/tpope/start/commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_emmet_vim	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^let g:loaded_emmet_vim = 1$/;"	v
g:loaded_endwise	pack/tpope/start/endwise/plugin/endwise.vim	/^let g:loaded_endwise = 1$/;"	v
g:loaded_eunuch	pack/tpope/start/eunuch/plugin/eunuch.vim	/^let g:loaded_eunuch = 1$/;"	v
g:loaded_fugitive	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fzf	pack/junegunn/start/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gutentags	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_matchit	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^let g:loaded_matchit = 1$/;"	v
g:loaded_matchparen	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^  let g:loaded_matchparen = 1$/;"	v
g:loaded_matchup	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^let g:loaded_matchup = 1$/;"	v
g:loaded_nerdtree_autoload	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^let g:loaded_nerdtree_autoload = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	pack/preservim/start/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_nerdtree_ui_glue_autoload	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^let g:loaded_nerdtree_ui_glue_autoload = 1$/;"	v
g:loaded_repeat	pack/tpope/start/repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_surround	pack/tpope/start/surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_unimpaired	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^let g:loaded_unimpaired = 1$/;"	v
g:matchup#perf#times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^      let g:matchup#perf#times[l:key].maximum = l:elapsed$/;"	v
g:matchup#perf#times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^    let g:matchup#perf#times[l:key] = {$/;"	v
g:matchup#perf#times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^    let g:matchup#perf#times[l:key].emavg = s:alpha*l:elapsed$/;"	v
g:matchup#perf#times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^    let g:matchup#perf#times[l:key].last = l:elapsed$/;"	v
g:matchup#perf#times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let g:matchup#perf#times = {}$/;"	v
g:matchup#re#backref	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let g:matchup#re#backref = s:nbsl . '\\\\' . '\\(\\d\\)'$/;"	v
g:matchup#re#gspec	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let g:matchup#re#gspec = s:nbsl . '\\\\g{\\(\\w\\+\\);\\?\\(.\\{-}\\)\\?}'$/;"	v
g:matchup#re#not_bslash	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let g:matchup#re#not_bslash = s:nbsl$/;"	v
g:matchup#re#ze	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let g:matchup#re#ze = s:nbsl . '\\\\ze'$/;"	v
g:matchup#re#zs	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let g:matchup#re#zs = s:nbsl . '\\\\zs'$/;"	v
g:matchup_hotfix	pack/andymass/start/vim-matchup/test/issues/69/cpptemplate.vim	/^  let g:matchup_hotfix = {}$/;"	v
g:matchup_hotfix	pack/andymass/start/vim-matchup/test/issues/69/cpptemplate.vim	/^let g:matchup_hotfix.cpp = 'CppTemplate'$/;"	v
g:matchup_hotfix_html	pack/andymass/start/vim-matchup/test/issues/19/hotfix.vim	/^let g:matchup_hotfix_html = 'HtmlListHotfix'$/;"	v
g:matchup_hotfix_html	pack/andymass/start/vim-matchup/test/issues/8/hotfix.vim	/^let g:matchup_hotfix_html = 'HTMLHotFix'$/;"	v
g:matchup_hotfix_sql	pack/andymass/start/vim-matchup/test/issues/3/hotfix.vim	/^let g:matchup_hotfix_sql = 'SQLHotFix'$/;"	v
g:matchup_hotfix_vim	pack/andymass/start/vim-matchup/test/issues/7/hotfix.vim	/^let g:matchup_hotfix_vim = 'AugroupHotfix'$/;"	v
g:matchup_hotfix_vim	pack/andymass/start/vim-matchup/test/issues/7/hotfix2.vim	/^let g:matchup_hotfix_vim = 'AugroupHotfix'$/;"	v
g:matchup_matchparen_deferred	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^    let g:matchup_matchparen_deferred = 0$/;"	v
g:matchup_matchparen_enabled	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  let g:matchup_matchparen_enabled = 0$/;"	v
g:matchup_matchparen_enabled	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  let g:matchup_matchparen_enabled = 1$/;"	v
g:matchup_matchparen_enabled	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  let g:matchup_matchparen_enabled = a:0 > 0$/;"	v
g:matchup_matchpref_html_nolists	pack/andymass/start/vim-matchup/test/issues/19/option.vim	/^let g:matchup_matchpref_html_nolists = 1$/;"	v
g:matchup_override_vimtex	pack/andymass/start/vim-matchup/test/new/common/bootstrap.vim	/^let g:matchup_override_vimtex = 1$/;"	v
g:repeat_count	pack/tpope/start/repeat/autoload/repeat.vim	/^    let g:repeat_count = a:0 ? a:1 : v:count$/;"	v
g:repeat_reg	pack/tpope/start/repeat/autoload/repeat.vim	/^    let g:repeat_reg = [a:sequence, a:register]$/;"	v
g:repeat_reg	pack/tpope/start/repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
g:repeat_sequence	pack/tpope/start/repeat/autoload/repeat.vim	/^    let g:repeat_sequence = a:sequence$/;"	v
g:repeat_tick	pack/tpope/start/repeat/autoload/repeat.vim	/^        let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	pack/tpope/start/repeat/autoload/repeat.vim	/^    let g:repeat_tick = -1$/;"	v
g:repeat_tick	pack/tpope/start/repeat/autoload/repeat.vim	/^    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	pack/tpope/start/repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:tex_flavor	pack/andymass/start/vim-matchup/test/new/test-delim/test.vim	/^let g:tex_flavor = "latex"$/;"	v
g:unimpaired_html_entities	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^let g:unimpaired_html_entities = {$/;"	v
g:user_emmet_install_global	pack/mattn/start/emmet-vim/unittest.vim	/^      let g:user_emmet_install_global = s:old_user_emmet_install_global$/;"	v
g:user_emmet_leader_key	options.vim	/^let g:user_emmet_leader_key = '<C-L>'$/;"	v
g:user_emmet_leader_key	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^  let g:user_emmet_leader_key = '<c-y>'$/;"	v
g:user_emmet_settings	pack/mattn/start/emmet-vim/unittest.vim	/^      let g:user_emmet_settings = s:old_user_emmet_settings$/;"	v
g:user_emmet_settings	pack/mattn/start/emmet-vim/unittest.vim	/^    let g:user_emmet_settings = {'variables': {'indentation': "\\t", 'use_selection': 1}}$/;"	v
g:v_motion_force	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^    let g:v_motion_force = len(l:mode) >= 3$/;"	v
g:v_motion_force	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  let g:v_motion_force = a:wise$/;"	v
g:v_motion_force	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^let g:v_motion_force = ''$/;"	v
g:vimtex_matchparen_enabled	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^    let g:vimtex_matchparen_enabled = 0$/;"	v
g:vimtex_matchparen_enabled	pack/andymass/start/vim-matchup/plugin/matchup.vim	/^  let g:vimtex_matchparen_enabled = 0$/;"	v
g:virtual_scriptnames	pack/tpope/start/fugitive/autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
gS	pack/tpope/start/surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gc	pack/tpope/start/commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	pack/tpope/start/commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	pack/tpope/start/commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	pack/tpope/start/commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	pack/tpope/start/commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
get	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function get(_, key)$/;"	f
getBytes	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getBytesInternal	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getEnv	pack/junegunn/start/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
get_byte_offset	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^local function get_byte_offset(buf, row, col)$/;"	f
getch	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
go	pack/junegunn/start/fzf/test/test_go.rb	/^  def go(args)$/;"	f	class:Tmux
gutentags#add_job	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	pack/ludovicchabant/start/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
hasPreviewAction	pack/junegunn/start/fzf/src/terminal.go	/^func hasPreviewAction(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
hasPreviewFlags	pack/junegunn/start/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, query bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, query bool)
hasPreviewWindow	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
header	pack/junegunn/start/fzf/src/terminal.go	/^	header       []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	pack/junegunn/start/fzf/src/terminal.go	/^	header0      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerLines	pack/junegunn/start/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
height	pack/junegunn/start/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	pack/junegunn/start/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	pack/junegunn/start/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
help	pack/junegunn/start/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	pack/junegunn/start/fzf/install	/^help() {$/;"	f
help	pack/junegunn/start/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
help	pack/junegunn/start/fzf/uninstall	/^help() {$/;"	f
hidden	pack/junegunn/start/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
highlight surrounding	pack/andymass/start/vim-matchup/README.md	/^#### highlight surrounding$/;"	t	subsection:vim match-up""Options""Module matchparen
highlighting timeouts	pack/andymass/start/vim-matchup/README.md	/^#### highlighting timeouts$/;"	t	subsection:vim match-up""Options""Module matchparen
history	pack/junegunn/start/fzf/src/terminal.go	/^	history      *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
horizontal	pack/junegunn/start/fzf/src/tui/tui.go	/^	horizontal  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
hscroll	pack/junegunn/start/fzf/src/terminal.go	/^	hscroll      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	pack/junegunn/start/fzf/src/terminal.go	/^	hscrollOff   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
htmlcov/index.html	pack/andymass/start/vim-matchup/test/new/Makefile	/^htmlcov\/index.html: env \/tmp\/vim-profile.txt$/;"	t
ifElseIfElseProg	pack/andymass/start/vim-matchup/test/issues/51/test.f90	/^program ifElseIfElseProg$/;"	p
ignore	pack/junegunn/start/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
il(	mappings.vim	/^onoremap il( :<C-u>normal! F)vi(<cr>$/;"	m
il)	mappings.vim	/^onoremap il) :<C-u>normal! F)vi(<cr>$/;"	m
ilB	mappings.vim	/^onoremap ilB :<C-u>normal! F}vi{<cr>$/;"	m
il[	mappings.vim	/^onoremap il[ :<C-u>normal! F]vi[<cr>$/;"	m
il]	mappings.vim	/^onoremap il] :<C-u>normal! F]vi[<cr>$/;"	m
ilb	mappings.vim	/^onoremap ilb :<C-u>normal! F)vi(<cr>$/;"	m
il{	mappings.vim	/^onoremap il{ :<C-u>normal! F}vi{<cr>$/;"	m
il}	mappings.vim	/^onoremap il} :<C-u>normal! F}vi{<cr>$/;"	m
in(	mappings.vim	/^onoremap in( :<C-u>normal! f(vi(<cr>$/;"	m
in)	mappings.vim	/^onoremap in) :<C-u>normal! f(vi(<cr>$/;"	m
inB	mappings.vim	/^onoremap inB :<C-u>normal! f{vi{<cr>$/;"	m
inBytes	pack/junegunn/start/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inHandle	pack/junegunn/start/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
in[	mappings.vim	/^onoremap in[ :<C-u>normal! f[vi[<cr>$/;"	m
in]	mappings.vim	/^onoremap in] :<C-u>normal! f[vi[<cr>$/;"	m
inb	mappings.vim	/^onoremap inb :<C-u>normal! f(vi(<cr>$/;"	m
index	pack/junegunn/start/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
indexAt	pack/junegunn/start/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
infoDefault	pack/junegunn/start/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	pack/junegunn/start/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	pack/junegunn/start/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoStyle	pack/junegunn/start/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	pack/junegunn/start/fzf/src/terminal.go	/^	infoStyle    infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	pack/junegunn/start/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	pack/junegunn/start/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	pack/junegunn/start/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	pack/junegunn/start/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	pack/junegunn/start/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	pack/junegunn/start/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	pack/junegunn/start/fzf/src/terminal.go	/^	initDelay    time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	pack/junegunn/start/fzf/src/terminal.go	/^	initFunc     func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
initPalette	pack/junegunn/start/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initPlatform	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initScreen	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	pack/junegunn/start/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialDelay	pack/junegunn/start/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	pack/junegunn/start/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialize	pack/andymass/start/vim-matchup/test/issues/26/example.rb	/^    def initialize$/;"	f	class:Example
initialize	pack/junegunn/start/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
input	pack/junegunn/start/fzf/src/terminal.go	/^	input        []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
insert_to_path	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  local function insert_to_path(object, path, value)$/;"	f
install	pack/junegunn/start/fzf/Makefile	/^install: bin\/fzf$/;"	t
interpretCode	pack/junegunn/start/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	pack/junegunn/start/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
in{	mappings.vim	/^onoremap in{ :<C-u>normal! f{vi{<cr>$/;"	m
in}	mappings.vim	/^onoremap in} :<C-u>normal! f{vi{<cr>$/;"	m
is24	pack/junegunn/start/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	pack/junegunn/start/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	pack/junegunn/start/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	pack/junegunn/start/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	pack/junegunn/start/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isNumeric	pack/junegunn/start/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPreviewEnabled	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
isPrint	pack/junegunn/start/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
is_active	pack/andymass/start/vim-matchup/lua/treesitter-matchup/syntax.lua	/^    is_active = function() return false end,$/;"	f
is_supported	pack/andymass/start/vim-matchup/lua/treesitter-matchup.lua	/^      is_supported = function(lang)$/;"	f
item	pack/junegunn/start/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	pack/junegunn/start/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	pack/junegunn/start/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	pack/junegunn/start/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:Tmux.until
items	pack/junegunn/start/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
iter	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
iterator	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  local function iterator()$/;"	f
j	mappings.vim	/^nmap j gj$/;"	m
joinTokens	pack/junegunn/start/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
jumpAcceptEnabled	pack/junegunn/start/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	pack/junegunn/start/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	pack/junegunn/start/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	pack/junegunn/start/fzf/src/terminal.go	/^	jumpLabels   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	pack/junegunn/start/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jumping	pack/junegunn/start/fzf/src/terminal.go	/^	jumping      jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
k	mappings.vim	/^nmap k gk$/;"	m
keepRight	pack/junegunn/start/fzf/src/terminal.go	/^	keepRight    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
keyMatch	pack/junegunn/start/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	pack/junegunn/start/fzf/src/terminal.go	/^	keymap       map[tui.Event][]action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]action
kill	pack/junegunn/start/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killChan	pack/junegunn/start/fzf/src/terminal.go	/^	killChan     chan int$/;"	m	struct:fzf.Terminal	typeref:typename:chan int
killPreview	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f	struct:fzf.Terminal
killed	pack/junegunn/start/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
l:line	pack/andymass/start/vim-matchup/test/legacy/forwhile.vim	/^    let l:line = getline('.')[:l:pos-1]$/;"	v
l:pos	pack/andymass/start/vim-matchup/test/legacy/forwhile.vim	/^              let l:pos -= 1$/;"	v
l:pos	pack/andymass/start/vim-matchup/test/legacy/forwhile.vim	/^    let l:pos  = col('.') - 1$/;"	v
l:pos	pack/andymass/start/vim-matchup/test/legacy/tabs.vim	/^				let l:pos -= 1$/;"	v
label	pack/junegunn/start/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine	typeref:typename:string
lastChunk	pack/junegunn/start/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastX	pack/junegunn/start/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	pack/junegunn/start/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
layout	pack/junegunn/start/fzf/src/terminal.go	/^	layout       layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	pack/junegunn/start/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	pack/junegunn/start/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	pack/junegunn/start/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	pack/junegunn/start/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	pack/junegunn/start/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
left	pack/junegunn/start/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	pack/junegunn/start/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
line	pack/junegunn/start/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
lines	pack/junegunn/start/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	pack/junegunn/start/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	pack/junegunn/start/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
link_fzf_in_path	pack/junegunn/start/fzf/install	/^link_fzf_in_path() {$/;"	f
list	pack/junegunn/start/fzf/src/terminal.go	/^	list     []*Item$/;"	m	struct:fzf.previewRequest	typeref:typename:[]*Item
lists	pack/junegunn/start/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
loaded_nerd_tree	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
lru.new	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^function lru.new(max_size, max_bytes)$/;"	f
lru_pairs	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function lru_pairs()$/;"	f
main	pack/junegunn/start/fzf/main.go	/^func main() {$/;"	f	package:main
main	pack/junegunn/start/fzf/main.go	/^package main$/;"	p
makeFreeSpace	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function makeFreeSpace(bytes)$/;"	f
makeSpace	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	pack/junegunn/start/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
mapleader	mappings.vim	/^let mapleader = ","$/;"	v
maplocalleader	mappings.vim	/^let maplocalleader = " "$/;"	v
margin	pack/junegunn/start/fzf/src/terminal.go	/^	margin       [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
marker	pack/junegunn/start/fzf/src/terminal.go	/^	marker       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerEmpty	pack/junegunn/start/fzf/src/terminal.go	/^	markerEmpty  string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	pack/junegunn/start/fzf/src/terminal.go	/^	markerLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
matchChunk	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	pack/junegunn/start/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	pack/junegunn/start/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f	package:fzf	typeref:typename:int
match_count	pack/junegunn/start/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:Tmux.until
matcher	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/reload.lua	/^    matcher = function(pack)$/;"	f
matches	pack/junegunn/start/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
matchup#custom#define_motion	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^function! matchup#custom#define_motion(modes, keys, fcn, ...) abort$/;"	f
matchup#custom#example_motion	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^function! matchup#custom#example_motion(info, opts) abort$/;"	f
matchup#custom#suggest_pos	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^function! matchup#custom#suggest_pos(delim, opts) abort$/;"	f
matchup#custom#wrap	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^function! matchup#custom#wrap(visual, id) abort$/;"	f
matchup#delim#end_offset	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#end_offset(delim) " {{{1$/;"	f
matchup#delim#end_pos	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#end_pos(delim) abort " {{{1$/;"	f
matchup#delim#fill_backrefs	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#fill_backrefs(re, groups, warn) " {{{1$/;"	f
matchup#delim#get_current	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_current(type, side, ...) abort " {{{1$/;"	f
matchup#delim#get_matching	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_matching(delim, ...) " {{{1$/;"	f
matchup#delim#get_next	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_next(type, side, ...) abort " {{{1$/;"	f
matchup#delim#get_prev	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_prev(type, side, ...) abort " {{{1$/;"	f
matchup#delim#get_surround_nearest	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_surround_nearest(open, ...) " {{{1$/;"	f
matchup#delim#get_surrounding	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_surrounding(type, count, opts) " {{{1$/;"	f
matchup#delim#get_surrounding_impl	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#get_surrounding_impl(type, ...) " {{{1$/;"	f
matchup#delim#jump_target	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#jump_target(delim) " {{{1$/;"	f
matchup#delim#skip	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#skip(...) " {{{1$/;"	f
matchup#delim#skip0	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#skip0()$/;"	f
matchup#delim#skip1	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#skip1(val, def)$/;"	f
matchup#delim#skip2	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#skip2(strike, def)$/;"	f
matchup#delim#skip_default	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! matchup#delim#skip_default()$/;"	f
matchup#init	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! matchup#init() abort$/;"	f
matchup#loader#bufwinenter	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#bufwinenter() abort " {{{1$/;"	f
matchup#loader#capture_group_replacement_order	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#capture_group_replacement_order(cg) abort " {{{1$/;"	f
matchup#loader#get_capture_groups	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#get_capture_groups(str, ...) abort " {{{1$/;"	f
matchup#loader#init_buffer	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#init_buffer() abort " {{{1$/;"	f
matchup#loader#init_module	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#init_module() abort " {{{1$/;"	f
matchup#loader#refresh_match_words	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#refresh_match_words() abort " {{{1$/;"	f
matchup#loader#remove_capture_groups	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#remove_capture_groups(re) abort "{{{1$/;"	f
matchup#loader#sidedict	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! matchup#loader#sidedict() abort$/;"	f
matchup#matchparen#disable	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#disable() " {{{1$/;"	f
matchup#matchparen#enable	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#enable() " {{{1$/;"	f
matchup#matchparen#highlight_surrounding	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#highlight_surrounding() abort " {{{1$/;"	f
matchup#matchparen#init_module	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#init_module() " {{{1$/;"	f
matchup#matchparen#reload	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#reload() " {{{1$/;"	f
matchup#matchparen#scroll_callback	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#scroll_callback(tid) " {{{1$/;"	f
matchup#matchparen#scroll_update	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#scroll_update(lnum) " {{{1$/;"	f
matchup#matchparen#status_str	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#status_str(offscreen, ...) abort " {{{1$/;"	f
matchup#matchparen#toggle	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#toggle(...) " {{{1$/;"	f
matchup#matchparen#update	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! matchup#matchparen#update() " {{{1$/;"	f
matchup#misc#reload	pack/andymass/start/vim-matchup/autoload/matchup/misc.vim	/^  function! matchup#misc#reload() abort$/;"	f
matchup#motion#find_matching_pair	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#find_matching_pair(visual, down) " {{{1$/;"	f
matchup#motion#find_unmatched	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#find_unmatched(visual, down, ...) " {{{1$/;"	f
matchup#motion#getoper	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#getoper() abort$/;"	f
matchup#motion#insert_mode	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#insert_mode() " {{{1$/;"	f
matchup#motion#jump_inside	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#jump_inside(visual) " {{{1$/;"	f
matchup#motion#op	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! matchup#motion#op(motion) abort$/;"	f
matchup#motion_force	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! matchup#motion_force() abort$/;"	f
matchup#motion_sid	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! matchup#motion_sid() abort$/;"	f
matchup#perf#show_times	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#show_times()$/;"	f
matchup#perf#tic	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#tic(context)$/;"	f
matchup#perf#timeout	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#timeout() " {{{1$/;"	f
matchup#perf#timeout_check	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#timeout_check() " {{{1$/;"	f
matchup#perf#timeout_start	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#timeout_start(timeout) " {{{1$/;"	f
matchup#perf#toc	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! matchup#perf#toc(context, state)$/;"	f
matchup#pos#	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#(...) abort " {{{1$/;"	f
matchup#pos#equal	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#equal(p1, p2) " {{{1$/;"	f
matchup#pos#get_cursor	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^  function! matchup#pos#get_cursor()$/;"	f
matchup#pos#get_cursor_line	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#get_cursor_line() " {{{1$/;"	f
matchup#pos#larger	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#larger(pos1, pos2) " {{{1$/;"	f
matchup#pos#next	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#next(...) " {{{1$/;"	f
matchup#pos#next_eol	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#next_eol(...) " {{{1$/;"	f
matchup#pos#prev	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#prev(...) " {{{1$/;"	f
matchup#pos#set_cursor	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#set_cursor(...) " {{{1$/;"	f
matchup#pos#smaller	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#smaller(pos1, pos2) " {{{1$/;"	f
matchup#pos#smaller_or_equal	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#smaller_or_equal(pos1, pos2) " {{{1$/;"	f
matchup#pos#val	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! matchup#pos#val(...) " {{{1$/;"	f
matchup#quirks#isclike	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^function! matchup#quirks#isclike() abort " {{{1$/;"	f
matchup#quirks#ishtmllike	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^function! matchup#quirks#ishtmllike() abort " {{{1$/;"	f
matchup#quirks#status_adjust	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^function! matchup#quirks#status_adjust(offscreen) abort " {{{1$/;"	f
matchup#surround#delimited	pack/andymass/start/vim-matchup/autoload/matchup/surround.vim	/^function! matchup#surround#delimited(is_cap, op, type) " {{{1$/;"	f
matchup#test#assert	pack/andymass/start/vim-matchup/autoload/matchup/test.vim	/^function! matchup#test#assert(condition) abort " {{{1$/;"	f
matchup#test#assert_equal	pack/andymass/start/vim-matchup/autoload/matchup/test.vim	/^function! matchup#test#assert_equal(expect, observe) abort " {{{1$/;"	f
matchup#test#assert_match	pack/andymass/start/vim-matchup/autoload/matchup/test.vim	/^function! matchup#test#assert_match(x, regex) abort " {{{1$/;"	f
matchup#text_obj#delimited	pack/andymass/start/vim-matchup/autoload/matchup/text_obj.vim	/^function! matchup#text_obj#delimited(is_inner, visual, type) abort " {{{1$/;"	f
matchup#text_obj#double_click	pack/andymass/start/vim-matchup/autoload/matchup/text_obj.vim	/^function! matchup#text_obj#double_click() abort " {{{1$/;"	f
matchup#text_obj#undo	pack/andymass/start/vim-matchup/autoload/matchup/text_obj.vim	/^function! matchup#text_obj#undo(seq)$/;"	f
matchup#transmute#disable	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#disable() " {{{1$/;"	f
matchup#transmute#dochange	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#dochange(list, pri, cur) " {{{1$/;"	f
matchup#transmute#enable	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#enable() " {{{1$/;"	f
matchup#transmute#init_module	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#init_module() " {{{1$/;"	f
matchup#transmute#reset	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#reset() " {{{1$/;"	f
matchup#transmute#tick	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! matchup#transmute#tick(insertmode) " {{{1$/;"	f
matchup#ts_engine#attach	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! matchup#ts_engine#attach(bufnr, lang) abort$/;"	f
matchup#ts_engine#detach	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! matchup#ts_engine#detach(bufnr) abort$/;"	f
matchup#ts_engine#get_delim	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! matchup#ts_engine#get_delim(opts) abort$/;"	f
matchup#ts_engine#get_matching	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! matchup#ts_engine#get_matching(down, _) dict abort$/;"	f
matchup#ts_engine#is_enabled	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! matchup#ts_engine#is_enabled(bufnr) abort$/;"	f
matchup#ts_syntax#skip_expr	pack/andymass/start/vim-matchup/autoload/matchup/ts_syntax.vim	/^function! matchup#ts_syntax#skip_expr(lnum, col) abort$/;"	f
matchup#ts_syntax#synID	pack/andymass/start/vim-matchup/autoload/matchup/ts_syntax.vim	/^function! matchup#ts_syntax#synID(lnum, col, trans) abort$/;"	f
matchup#unmatchit#	pack/andymass/start/vim-matchup/autoload/matchup/unmatchit.vim	/^function! matchup#unmatchit#()$/;"	f
matchup#util#append_match_words	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#append_match_words(str) abort " {{{1$/;"	f
matchup#util#check_match_words	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#check_match_words(sha256) " {{{1$/;"	f
matchup#util#command	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#command(cmd) " {{{1$/;"	f
matchup#util#has_duplicate_str	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#has_duplicate_str(list) " {{{1$/;"	f
matchup#util#in_comment	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_comment(...) " {{{1$/;"	f
matchup#util#in_comment_or_string	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_comment_or_string(...) " {{{1$/;"	f
matchup#util#in_indent	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_indent(...) " {{{1$/;"	f
matchup#util#in_string	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_string(...) " {{{1$/;"	f
matchup#util#in_synstack	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_synstack(name, ...) abort " {{{1$/;"	f
matchup#util#in_syntax	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_syntax(name, ...) " {{{1$/;"	f
matchup#util#in_whitespace	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#in_whitespace(...) " {{{1$/;"	f
matchup#util#matchpref	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#matchpref(id, default) " {{{1$/;"	f
matchup#util#patch_match_words	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#patch_match_words(from, to, ...) abort " {{{1$/;"	f
matchup#util#uniq	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#uniq(list) " {{{1$/;"	f
matchup#util#uniq_unsorted	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^function! matchup#util#uniq_unsorted(list) " {{{1$/;"	f
matchup#where#get	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! matchup#where#get(timeout) abort " {{{1$/;"	f
matchup#where#print	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! matchup#where#print(args)$/;"	f
matchup_filetype	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^  augroup matchup_filetype$/;"	a
matchup_filetype_query	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  augroup matchup_filetype_query$/;"	a
matchup_matchparen	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  augroup matchup_matchparen$/;"	a
matchup_matchparen_scroll	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^      augroup matchup_matchparen_scroll$/;"	a
matchup_parsing	pack/andymass/start/vim-matchup/test/issues/63/test.f90	/^program matchup_parsing$/;"	p
maxHeightFunc	pack/junegunn/start/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxInputBuffer	pack/junegunn/start/fzf/src/tui/light.go	/^	maxInputBuffer  = 10 * 1024$/;"	c	package:tui
maxItems	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	pack/junegunn/start/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	pack/junegunn/start/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	pack/junegunn/start/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxSize	pack/junegunn/start/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
median	pack/andymass/start/vim-matchup/test/issues/3/test.sql	/^CREATE FUNCTION dbo.median (@score int)$/;"	f
merge	pack/junegunn/start/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	pack/junegunn/start/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	pack/junegunn/start/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	pack/junegunn/start/fzf/src/terminal.go	/^	merger       *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	pack/junegunn/start/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	pack/junegunn/start/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
minHeight	pack/junegunn/start/fzf/src/terminal.go	/^	minHeight = 4$/;"	c	package:fzf
minItem	pack/junegunn/start/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minRank	pack/junegunn/start/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	pack/junegunn/start/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
modified	pack/junegunn/start/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
mouse	pack/junegunn/start/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	pack/junegunn/start/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCursor	pack/junegunn/start/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
mt.__index	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  mt.__index = function(tbl, key)$/;"	f
multi	pack/junegunn/start/fzf/src/terminal.go	/^	multi        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
mutex	pack/junegunn/start/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	pack/junegunn/start/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	pack/junegunn/start/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	pack/junegunn/start/fzf/src/terminal.go	/^	mutex        sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
mynext	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function mynext(_, prev_key)$/;"	f
nerdtree#checkForBrowse	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#checkForBrowse(dir) abort$/;"	f
nerdtree#closeBookmarksOnOpen	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeBookmarksOnOpen() abort$/;"	f
nerdtree#closeTreeOnOpen	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#closeTreeOnOpen() abort$/;"	f
nerdtree#compareNodePaths	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodePaths(p1, p2) abort$/;"	f
nerdtree#compareNodes	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#compareNodes(n1, n2) abort$/;"	f
nerdtree#completeBookmarks	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#completeBookmarks(A,L,P) abort$/;"	f
nerdtree#deprecated	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#deprecated(func, ...) abort$/;"	f
nerdtree#echo	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echo(msg) abort$/;"	f
nerdtree#echoError	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoError(msg) abort$/;"	f
nerdtree#echoWarning	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#echoWarning(msg) abort$/;"	f
nerdtree#exec	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#exec(cmd, ignoreAll) abort$/;"	f
nerdtree#has_opt	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#has_opt(options, name) abort$/;"	f
nerdtree#loadClassFiles	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#loadClassFiles() abort$/;"	f
nerdtree#postSourceActions	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#postSourceActions() abort$/;"	f
nerdtree#renderView	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#renderView() abort$/;"	f
nerdtree#runningCygwin	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningCygwin() abort$/;"	f
nerdtree#runningWindows	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#runningWindows() abort$/;"	f
nerdtree#slash	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#slash() abort$/;"	f
nerdtree#ui_glue#bookmarkNode	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#bookmarkNode(...) abort$/;"	f
nerdtree#ui_glue#chRootCwd	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#chRootCwd() abort$/;"	f
nerdtree#ui_glue#clearBookmarks	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#clearBookmarks(bookmarks) abort$/;"	f
nerdtree#ui_glue#createDefaultBindings	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#createDefaultBindings() abort$/;"	f
nerdtree#ui_glue#invokeKeyMap	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#invokeKeyMap(key) abort$/;"	f
nerdtree#ui_glue#openBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#openBookmark(name) abort$/;"	f
nerdtree#ui_glue#revealBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#revealBookmark(name) abort$/;"	f
nerdtree#ui_glue#setupCommands	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#setupCommands() abort$/;"	f
nerdtree#ui_glue#upDir	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! nerdtree#ui_glue#upDir(preserveState) abort$/;"	f
nerdtree#version	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! nerdtree#version(...) abort$/;"	f
newItem	pack/junegunn/start/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newRange	pack/junegunn/start/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	pack/junegunn/start/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	pack/junegunn/start/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
nextInt	pack/junegunn/start/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf	typeref:typename:int
nextString	pack/junegunn/start/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf	typeref:typename:string
noInfoLine	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) noInfoLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
no_cvr_prefinal_lazy_t	pack/andymass/start/vim-matchup/test/issues/69/template.cpp	/^    >::type no_cvr_prefinal_lazy_t;$/;"	t	typeref:typename:BOOST_DEDUCED_TYPENAME boost::conditional<boost::is_signed<no_cvr_prefinal_t>::value,boost::make_signed<no_cvr_prefinal_t>,boost::type_identity<no_cvr_prefinal_t>>::type	file:
nomatchparen	pack/andymass/start/vim-matchup/test/issues/7/augroup.vim	/^augroup nomatchparen$/;"	a
normal	pack/junegunn/start/fzf/src/tui/tcell.go	/^	normal      ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normalize	pack/junegunn/start/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	pack/junegunn/start/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	pack/junegunn/start/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	pack/junegunn/start/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo	typeref:typename:map[rune]rune
notifyOnCont	pack/junegunn/start/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	pack/junegunn/start/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	pack/junegunn/start/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	pack/junegunn/start/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	pack/junegunn/start/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	pack/junegunn/start/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
nth	pack/junegunn/start/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
numLines	pack/junegunn/start/fzf/src/terminal.go	/^	numLines int$/;"	m	struct:fzf.previewed	typeref:typename:int
numPartitionsMultiplier	pack/junegunn/start/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	pack/junegunn/start/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
offset	pack/junegunn/start/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	pack/junegunn/start/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	pack/junegunn/start/fzf/src/terminal.go	/^	offset       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	pack/junegunn/start/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	pack/junegunn/start/fzf/src/terminal.go	/^	offset   int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	pack/junegunn/start/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	pack/junegunn/start/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	pack/junegunn/start/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	pack/junegunn/start/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetRegexpBegin	pack/junegunn/start/fzf/src/tui/light.go	/^var offsetRegexpBegin *regexp.Regexp = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetTrimCharsRegex	pack/junegunn/start/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
openTtyIn	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
openTtyIn	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
optString	pack/junegunn/start/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNextString	pack/junegunn/start/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNumeric	pack/junegunn/start/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) int {$/;"	f	package:fzf	typeref:typename:int
optionalRunes	pack/junegunn/start/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
opts.sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sinklist	pack/junegunn/start/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	pack/junegunn/start/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
origState	pack/junegunn/start/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	pack/junegunn/start/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	pack/junegunn/start/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	pack/junegunn/start/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
outHandle	pack/junegunn/start/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	pack/junegunn/start/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	pack/junegunn/start/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	pack/junegunn/start/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
padding	pack/junegunn/start/fzf/src/terminal.go	/^	padding      [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
parseAlgo	pack/junegunn/start/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf	typeref:typename:algo.Algo
parseAnsiCode	pack/junegunn/start/fzf/src/ansi.go	/^func parseAnsiCode(s string) (int, string) {$/;"	f	package:fzf	typeref:typename:(int, string)
parseBorder	pack/junegunn/start/fzf/src/options.go	/^func parseBorder(str string, optional bool) tui.BorderShape {$/;"	f	package:fzf	typeref:typename:tui.BorderShape
parseHeight	pack/junegunn/start/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseInfoStyle	pack/junegunn/start/fzf/src/options.go	/^func parseInfoStyle(str string) infoStyle {$/;"	f	package:fzf	typeref:typename:infoStyle
parseKeyChords	pack/junegunn/start/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[tui.Event]string {$/;"	f	package:fzf	typeref:typename:map[tui.Event]string
parseKeymap	pack/junegunn/start/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
parseLayout	pack/junegunn/start/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f	package:fzf	typeref:typename:layoutType
parseMargin	pack/junegunn/start/fzf/src/options.go	/^func parseMargin(opt string, margin string) [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
parseOptions	pack/junegunn/start/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	pack/junegunn/start/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	pack/junegunn/start/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parsePrompt	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseSize	pack/junegunn/start/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseTerms	pack/junegunn/start/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	pack/junegunn/start/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
parseTiebreak	pack/junegunn/start/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf	typeref:typename:[]criterion
parseToggleSort	pack/junegunn/start/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
partialResult	pack/junegunn/start/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	pack/junegunn/start/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
paste	pack/junegunn/start/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path	pack/junegunn/start/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
pattern	pack/junegunn/start/fzf/src/matcher.go	/^	pattern    *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	pack/junegunn/start/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	pack/junegunn/start/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	pack/junegunn/start/fzf/src/terminal.go	/^	paused       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pborder	pack/junegunn/start/fzf/src/terminal.go	/^	pborder      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
percent	pack/junegunn/start/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
placeCursor	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	pack/junegunn/start/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderFlags	pack/junegunn/start/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
plugin/*.vim	pack/andymass/start/vim-matchup/.projections.json	/^  "plugin\/*.vim": {"type": "plugin"},$/;"	o
plus	pack/junegunn/start/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pointer	pack/junegunn/start/fzf/src/terminal.go	/^	pointer      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	pack/junegunn/start/fzf/src/terminal.go	/^	pointerEmpty string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	pack/junegunn/start/fzf/src/terminal.go	/^	pointerLen   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	pack/junegunn/start/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
posArray	pack/junegunn/start/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posDown	pack/junegunn/start/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	pack/junegunn/start/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	pack/junegunn/start/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	pack/junegunn/start/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	pack/junegunn/start/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
postProcessOptions	pack/junegunn/start/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	pack/junegunn/start/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	pack/junegunn/start/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
prefixLength	pack/junegunn/start/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prepare	pack/junegunn/start/fzf/test/test_go.rb	/^  def prepare$/;"	f	class:Tmux
preserveSpace	pack/junegunn/start/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	pack/junegunn/start/fzf/src/terminal.go	/^	pressed      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	pack/junegunn/start/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	pack/junegunn/start/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	pack/junegunn/start/fzf/src/terminal.go	/^	prevLines    []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
preview	pack/junegunn/start/fzf/src/tui/light.go	/^	preview  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
preview	pack/junegunn/start/fzf/src/tui/tcell.go	/^	preview     bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
previewBox	pack/junegunn/start/fzf/src/terminal.go	/^	previewBox   *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	pack/junegunn/start/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	pack/junegunn/start/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	pack/junegunn/start/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewOpts	pack/junegunn/start/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	pack/junegunn/start/fzf/src/terminal.go	/^	previewOpts  previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewRequest	pack/junegunn/start/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	pack/junegunn/start/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewed	pack/junegunn/start/fzf/src/terminal.go	/^	previewed    previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	pack/junegunn/start/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	pack/junegunn/start/fzf/src/terminal.go	/^	previewer    previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	pack/junegunn/start/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	pack/junegunn/start/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
printAll	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printHeader	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f	struct:fzf.Terminal
printList	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	pack/junegunn/start/fzf/src/terminal.go	/^	printQuery   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printString	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
printer	pack/junegunn/start/fzf/src/terminal.go	/^	printer      func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	pack/junegunn/start/fzf/src/terminal.go	/^	printsep     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
procFun	pack/junegunn/start/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
processTabs	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
progress	pack/junegunn/start/fzf/src/terminal.go	/^	progress     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	pack/junegunn/start/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
prompt	pack/junegunn/start/fzf/src/terminal.go	/^	prompt       func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
promptLen	pack/junegunn/start/fzf/src/terminal.go	/^	promptLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
protector	pack/junegunn/start/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	pack/junegunn/start/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
push	pack/junegunn/start/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	pack/junegunn/start/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	pack/junegunn/start/fzf/src/terminal.go	/^	pwindow      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindow	pack/junegunn/start/fzf/src/terminal.go	/^	pwindow  tui.Window$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.Window
q	pack/andymass/start/vim-matchup/test/new/common/bootstrap.vim	/^nnoremap q :qall!<cr>$/;"	m
q	pack/tpope/start/fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> q    :<C-U>echoerr "fugitive: q is removed in favor of gq (or/;"	m
q	pack/tpope/start/fugitive/autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q :echoerr "fugitive: q removed in favor of gq (or :q)"<CR>$/;"	m
query	pack/junegunn/start/fzf/src/terminal.go	/^	query         bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
queryCache	pack/junegunn/start/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	pack/junegunn/start/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	pack/junegunn/start/fzf/src/terminal.go	/^	queryLen     [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	pack/junegunn/start/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	pack/junegunn/start/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quoteEntry	pack/junegunn/start/fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quoteEntryCmd	pack/junegunn/start/fzf/src/terminal.go	/^func quoteEntryCmd(entry string) string {$/;"	f	package:fzf	typeref:typename:string
randResult	pack/junegunn/start/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
rangeEllipsis	pack/junegunn/start/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
readFiles	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) readFiles() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell *string, command string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readerBufferSize	pack/junegunn/start/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	pack/junegunn/start/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	pack/junegunn/start/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	pack/junegunn/start/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
reading	pack/junegunn/start/fzf/src/terminal.go	/^	reading      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readonce	pack/junegunn/start/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
redraw	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	struct:fzf.Terminal
refresh	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	struct:fzf.Terminal
regex	pack/junegunn/start/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
release	pack/junegunn/start/fzf/Makefile	/^release:$/;"	t
release	pack/mattn/start/emmet-vim/Makefile	/^release: emmet-vim.zip$/;"	t
reload.reload_module	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/reload.lua	/^reload.reload_module = function(module_name, starts_with_only)$/;"	f
remove	pack/junegunn/start/fzf/uninstall	/^remove() {$/;"	f
remove-zip	pack/mattn/start/emmet-vim/Makefile	/^remove-zip:$/;"	t
remove_line	pack/junegunn/start/fzf/uninstall	/^remove_line() {$/;"	f
renderPreviewArea	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	pack/junegunn/start/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	pack/junegunn/start/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
repeat#errmsg	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#errmsg()$/;"	f
repeat#invalidate	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#run	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#set	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#wrap	pack/tpope/start/repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
repeat.vim	pack/tpope/start/repeat/README.markdown	/^# repeat.vim$/;"	c
repeatPlugin	pack/tpope/start/repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repeat_custom_motion	pack/tpope/start/repeat/autoload/repeat.vim	/^    augroup repeat_custom_motion$/;"	a
replacePlaceholder	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Ite/;"	f	struct:fzf.Terminal	typeref:typename:string
replacePlaceholder	pack/junegunn/start/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, printsep string, f/;"	f	package:fzf	typeref:typename:string
reqBox	pack/junegunn/start/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	pack/junegunn/start/fzf/src/terminal.go	/^	reqBox       *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	pack/junegunn/start/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqHeader	pack/junegunn/start/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	pack/junegunn/start/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	pack/junegunn/start/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	pack/junegunn/start/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	pack/junegunn/start/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	pack/junegunn/start/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	pack/junegunn/start/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	pack/junegunn/start/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	pack/junegunn/start/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	pack/junegunn/start/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	pack/junegunn/start/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	pack/junegunn/start/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRefresh	pack/junegunn/start/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	pack/junegunn/start/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	pack/junegunn/start/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	pack/junegunn/start/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
resizeWindows	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f	struct:fzf.Terminal
restart	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) restart(command string) {$/;"	f	struct:fzf.Reader
restoreTerminal	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
result	pack/junegunn/start/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
reverseStringArray	pack/junegunn/start/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
revision	pack/junegunn/start/fzf/main.go	/^var revision string = "devel"$/;"	v	package:main	typeref:typename:string
rmcup	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rubout	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
running	pack/junegunn/start/fzf/src/terminal.go	/^	running      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
s:AddHeader	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
s:AddSection	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
s:ArgSplit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
s:AskPassArgs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:BlameBufnr	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameJump	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameQuit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlankDown	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:BlankDown(count) abort$/;"	f
s:BlankUp	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:BlankUp(count) abort$/;"	f
s:BlobTemp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:Bookmark	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^let s:Bookmark = {}$/;"	v
s:Bookmark.AddBookmark	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
s:Bookmark.BookmarkExistsFor	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
s:Bookmark.BookmarkFor	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
s:Bookmark.BookmarkNames	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
s:Bookmark.Bookmarks	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
s:Bookmark.CacheBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
s:Bookmark.ClearAll	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ClearAll()$/;"	f
s:Bookmark.CompareBookmarksByName	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.CompareBookmarksByName(firstBookmark, secondBookmark)$/;"	f
s:Bookmark.Edit	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Edit()$/;"	f
s:Bookmark.GetNodeForName	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot, nerdtree)$/;"	f
s:Bookmark.GetSelected	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.GetSelected()$/;"	f
s:Bookmark.InvalidBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
s:Bookmark.New	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.New(name, path)$/;"	f
s:Bookmark.SortBookmarksList	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.SortBookmarksList()$/;"	f
s:Bookmark.ToRoot	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.ToRoot(name, nerdtree)$/;"	f
s:Bookmark.Write	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.Write()$/;"	f
s:Bookmark.activate	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.activate(nerdtree, ...)$/;"	f
s:Bookmark.delete	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.delete()$/;"	f
s:Bookmark.getNode	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.getNode(nerdtree, searchFromAbsoluteRoot)$/;"	f
s:Bookmark.mustExist	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.mustExist()$/;"	f
s:Bookmark.open	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.open(nerdtree, ...)$/;"	f
s:Bookmark.openInNewTab	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
s:Bookmark.setPath	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.setPath(path)$/;"	f
s:Bookmark.str	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.str()$/;"	f
s:Bookmark.toRoot	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.toRoot(nerdtree)$/;"	f
s:Bookmark.validate	pack/preservim/start/nerdtree/lib/nerdtree/bookmark.vim	/^function! s:Bookmark.validate()$/;"	f
s:BrowserOpen	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
s:BufName	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BuildEnvPrefix	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildShell	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
s:CeilingDirectories	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:Chmod	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:Chmod(bang, perm, ...) abort$/;"	f
s:ChompDefault	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompError	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
s:CommitInteractive	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompareAge	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
s:CompletableSubcommands	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
s:CompleteHeads	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompleteRemote	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:ConfigTimestamps	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:ContainingCommit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:Context	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:Context(reverse) abort$/;"	f
s:ContextMotion	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:ContextMotion(reverse) abort$/;"	f
s:CreateTabTreeVCS	pack/preservim/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:CreateTabTreeVCS(name)$/;"	f
s:Creator	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^let s:Creator = {}$/;"	v
s:Creator.BufNamePrefix	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.BufNamePrefix()$/;"	f
s:Creator.CreateMirror	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateMirror()$/;"	f
s:Creator.CreateTabTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateTabTree(name)$/;"	f
s:Creator.CreateWindowTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.CreateWindowTree(dir)$/;"	f
s:Creator.New	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.New()$/;"	f
s:Creator.ToggleTabTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.ToggleTabTree(dir)$/;"	f
s:Creator._bindMappings	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._bindMappings()$/;"	f
s:Creator._broadcastInitEvent	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._broadcastInitEvent()$/;"	f
s:Creator._createNERDTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createNERDTree(path, type)$/;"	f
s:Creator._createTreeWin	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._createTreeWin()$/;"	f
s:Creator._isBufHidden	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._isBufHidden(nr)$/;"	f
s:Creator._nextBufferName	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferName()$/;"	f
s:Creator._nextBufferNumber	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._nextBufferNumber()$/;"	f
s:Creator._pathForString	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._pathForString(str)$/;"	f
s:Creator._removeTreeBufForTab	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._removeTreeBufForTab()$/;"	f
s:Creator._setCommonBufOptions	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setCommonBufOptions()$/;"	f
s:Creator._setupStatusline	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._setupStatusline()$/;"	f
s:Creator._tabpagevar	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._tabpagevar(tabnr, var)$/;"	f
s:Creator._uniq	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator._uniq(list)$/;"	f
s:Creator.createMirror	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createMirror()$/;"	f
s:Creator.createTabTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createTabTree(name)$/;"	f
s:Creator.createWindowTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.createWindowTree(dir)$/;"	f
s:Creator.toggleTabTree	pack/preservim/start/nerdtree/lib/nerdtree/creator.vim	/^function! s:Creator.toggleTabTree(dir)$/;"	f
s:DifftoolSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:Do	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
s:DoAutocmdChanged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoStagePushHeader	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DotRelative	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:EchoExec	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
s:EchoHLString	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! s:EchoHLString(str)$/;"	f
s:Event	pack/preservim/start/nerdtree/lib/nerdtree/event.vim	/^let s:Event = {}$/;"	v
s:Event.New	pack/preservim/start/nerdtree/lib/nerdtree/event.vim	/^function! s:Event.New(nerdtree, subject, action, params) abort$/;"	f
s:ExecMove	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:ExecMove(cmd) abort$/;"	f
s:ExecPath	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:Expand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandMap	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:ExpandMap(map)$/;"	f
s:ExpandVar	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpandVarLegacy	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
s:ExpireStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:FileByOffset	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:FileByOffset(num) abort$/;"	f
s:FileIgnoreCase	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:FilterEscape	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:FindParentVCSRoot	pack/preservim/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:FindParentVCSRoot(path)$/;"	f
s:FlagSet	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^let s:FlagSet = {}$/;"	v
s:FlagSet.New	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.New()$/;"	f
s:FlagSet._flagsForScope	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet._flagsForScope(scope)$/;"	f
s:FlagSet.addFlag	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.addFlag(scope, flag)$/;"	f
s:FlagSet.clearFlags	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.clearFlags(scope)$/;"	f
s:FlagSet.removeFlag	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.removeFlag(scope, flag)$/;"	f
s:FlagSet.renderToString	pack/preservim/start/nerdtree/lib/nerdtree/flag_set.vim	/^function! s:FlagSet.renderToString()$/;"	f
s:Format	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatFile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatLog	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:GF	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:Generate	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
s:GitCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
s:GitShellCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
s:GlobComplete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
s:Go	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = ""$/;"	v
s:Go	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^  let s:Go = "\\<C-G>U"$/;"	v
s:Grep	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:Grep(bang, args, prg, type) abort$/;"	f
s:GrepParseLine	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
s:GrepSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:HasOpt	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:InNumber	pack/andymass/start/vim-matchup/test/issues/34/endvar.vim	/^function! s:InNumber() abort$/;"	f
s:IsConflicted	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:JobOpts	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:KeyMap	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:KeyMap = {}$/;"	v
s:KeyMap.Add	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Add(keymap)$/;"	f
s:KeyMap.All	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.All()$/;"	f
s:KeyMap.BindAll	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.BindAll()$/;"	f
s:KeyMap.Compare	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Compare(keyMap1, keyMap2)$/;"	f
s:KeyMap.Create	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Create(options)$/;"	f
s:KeyMap.FindFor	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.FindFor(key, scope)$/;"	f
s:KeyMap.Invoke	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Invoke(key)$/;"	f
s:KeyMap.Remove	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.Remove(key, scope)$/;"	f
s:KeyMap.bind	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.bind()$/;"	f
s:KeyMap.invoke	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^function! s:KeyMap.invoke(...)$/;"	f
s:Keywordprg	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:Left	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^let s:Left = s:Go."\\<LEFT>"$/;"	v
s:LinesError	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:LogFlushQueue	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
s:Map	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:MapMotion	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MapNextFamily	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:MapNextFamily(map,cmd) abort$/;"	f
s:MenuController	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^let s:MenuController = {}$/;"	v
s:MenuController.New	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.New(menuItems)$/;"	f
s:MenuController._allIndexesFor	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
s:MenuController._current	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._current()$/;"	f
s:MenuController._cursorDown	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorDown()$/;"	f
s:MenuController._cursorUp	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._cursorUp()$/;"	f
s:MenuController._echoPrompt	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._echoPrompt()$/;"	f
s:MenuController._handleKeypress	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
s:MenuController._nextIndexFor	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
s:MenuController._restoreOptions	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._restoreOptions()$/;"	f
s:MenuController._saveOptions	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._saveOptions()$/;"	f
s:MenuController._setCmdheight	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController._setCmdheight()$/;"	f
s:MenuController.isMinimal	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.isMinimal()$/;"	f
s:MenuController.showMenu	pack/preservim/start/nerdtree/lib/nerdtree/menu_controller.vim	/^function! s:MenuController.showMenu()$/;"	f
s:MenuItem	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^let s:MenuItem = {}$/;"	v
s:MenuItem.All	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.All()$/;"	f
s:MenuItem.AllEnabled	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
s:MenuItem.Create	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.Create(options)$/;"	f
s:MenuItem.CreateSeparator	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
s:MenuItem.CreateSubmenu	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
s:MenuItem.enabled	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.enabled()$/;"	f
s:MenuItem.execute	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.execute()$/;"	f
s:MenuItem.isSeparator	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSeparator()$/;"	f
s:MenuItem.isSubmenu	pack/preservim/start/nerdtree/lib/nerdtree/menu_item.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
s:MergeHead	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
s:MergeSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MessageCfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
s:Mods	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Move	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:Move	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:Move(cmd, count, map) abort$/;"	f
s:MoveSelectionDown	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionDown(count) abort$/;"	f
s:MoveSelectionUp	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:MoveSelectionUp(count) abort$/;"	f
s:NERDTree	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^let s:NERDTree = {}$/;"	v
s:NERDTree.AddPathFilter	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.AddPathFilter(callback)$/;"	f
s:NERDTree.Close	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.Close()$/;"	f
s:NERDTree.CursorToBookmarkTable	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToBookmarkTable()$/;"	f
s:NERDTree.CursorToTreeWin	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.CursorToTreeWin(...)$/;"	f
s:NERDTree.ExistsForBuf	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForBuf()$/;"	f
s:NERDTree.ExistsForTab	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ExistsForTab()$/;"	f
s:NERDTree.ForCurrentBuf	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentBuf()$/;"	f
s:NERDTree.ForCurrentTab	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.ForCurrentTab()$/;"	f
s:NERDTree.GetWinNum	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.GetWinNum()$/;"	f
s:NERDTree.IsOpen	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.IsOpen()$/;"	f
s:NERDTree.MustBeOpen	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.MustBeOpen()$/;"	f
s:NERDTree.New	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.New(path, type)$/;"	f
s:NERDTree.PathFilters	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.PathFilters()$/;"	f
s:NERDTree.changeRoot	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.changeRoot(node)$/;"	f
s:NERDTree.getRoot	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.getRoot()$/;"	f
s:NERDTree.isTabTree	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isTabTree()$/;"	f
s:NERDTree.isWinTree	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.isWinTree()$/;"	f
s:NERDTree.previousBuf	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.previousBuf()$/;"	f
s:NERDTree.render	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.render()$/;"	f
s:NERDTree.setPreviousBuf	pack/preservim/start/nerdtree/lib/nerdtree/nerdtree.vim	/^function! s:NERDTree.setPreviousBuf(bnum)$/;"	f
s:NavigateUp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NextExpandedHunk	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:Notifier	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^let s:Notifier = {}$/;"	v
s:Notifier.AddListener	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.AddListener(event, funcname)$/;"	f
s:Notifier.GetListenersForEvent	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersForEvent(name)$/;"	f
s:Notifier.GetListenersMap	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.GetListenersMap()$/;"	f
s:Notifier.NotifyListeners	pack/preservim/start/nerdtree/lib/nerdtree/notifier.vim	/^function! s:Notifier.NotifyListeners(event, path, nerdtree, params)$/;"	f
s:Nsort	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^let s:Nsort = has('patch-7.4.951') ? 'N' : 's:Nsort_func'$/;"	v
s:Nsort_func	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:Nsort_func(a, b) abort " {{{1$/;"	f
s:NullError	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
s:OpenParse	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd) abort$/;"	f
s:Opener	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^let s:Opener = {}$/;"	v
s:Opener.New	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.New(path, opts)$/;"	f
s:Opener._bufInWindows	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._bufInWindows(bnum)$/;"	f
s:Opener._checkToCloseTree	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._checkToCloseTree(newtab)$/;"	f
s:Opener._firstUsableWindow	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._firstUsableWindow()$/;"	f
s:Opener._gotoTargetWin	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._gotoTargetWin()$/;"	f
s:Opener._isWindowUsable	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._isWindowUsable(winnumber)$/;"	f
s:Opener._newSplit	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newSplit()$/;"	f
s:Opener._newVSplit	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._newVSplit()$/;"	f
s:Opener._openDirectory	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openDirectory(node)$/;"	f
s:Opener._openFile	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._openFile()$/;"	f
s:Opener._previousWindow	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._previousWindow()$/;"	f
s:Opener._restoreCursorPos	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._restoreCursorPos()$/;"	f
s:Opener._reuseWindow	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._reuseWindow()$/;"	f
s:Opener._saveCursorPos	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener._saveCursorPos()$/;"	f
s:Opener.open	pack/preservim/start/nerdtree/lib/nerdtree/opener.vim	/^function! s:Opener.open(target)$/;"	f
s:Owner	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:PatchSearchExpr	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:Path	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^let s:Path = {}$/;"	v
s:Path.AbsolutePathFor	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.AbsolutePathFor(pathStr)$/;"	f
s:Path.CopyingSupported	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.CopyingSupported()$/;"	f
s:Path.Create	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Create(fullpath)$/;"	f
s:Path.JoinPathStrings	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
s:Path.New	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.New(pathStr)$/;"	f
s:Path.Resolve	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.Resolve(path)$/;"	f
s:Path.WinToUnixPath	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
s:Path._escChars	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._escChars()$/;"	f
s:Path._ignorePatternMatches	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._ignorePatternMatches(pattern)$/;"	f
s:Path._splitChunks	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._splitChunks(path)$/;"	f
s:Path._str	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._str()$/;"	f
s:Path._strForCd	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForCd()$/;"	f
s:Path._strForEdit	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForEdit()$/;"	f
s:Path._strForGlob	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForGlob()$/;"	f
s:Path._strForUI	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path._strForUI()$/;"	f
s:Path.addDelimiter	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.addDelimiter(line)$/;"	f
s:Path.bookmarkNames	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.bookmarkNames()$/;"	f
s:Path.cacheDisplayString	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.cacheDisplayString() abort$/;"	f
s:Path.changeToDir	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.changeToDir()$/;"	f
s:Path.copy	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copy(dest)$/;"	f
s:Path.copyingWillOverwrite	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
s:Path.createParentDirectories	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.createParentDirectories(path)$/;"	f
s:Path.delete	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.delete()$/;"	f
s:Path.displayString	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.displayString()$/;"	f
s:Path.edit	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.edit()$/;"	f
s:Path.equals	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.equals(path)$/;"	f
s:Path.exists	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.exists()$/;"	f
s:Path.extractDriveLetter	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
s:Path.getDir	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getDir()$/;"	f
s:Path.getLastPathComponent	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
s:Path.getParent	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getParent()$/;"	f
s:Path.getSortKey	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortKey()$/;"	f
s:Path.getSortOrderIndex	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
s:Path.ignore	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.ignore(nerdtree)$/;"	f
s:Path.isAncestor	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isAncestor(child)$/;"	f
s:Path.isHiddenUnder	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isHiddenUnder(path)$/;"	f
s:Path.isUnder	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnder(parent)$/;"	f
s:Path.isUnixHiddenFile	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenFile()$/;"	f
s:Path.isUnixHiddenPath	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.isUnixHiddenPath()$/;"	f
s:Path.readInfoFromDisk	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
s:Path.refresh	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refresh(nerdtree)$/;"	f
s:Path.refreshFlags	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.refreshFlags(nerdtree)$/;"	f
s:Path.rename	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.rename(newPath)$/;"	f
s:Path.str	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.str(...)$/;"	f
s:Path.strTrunk	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.strTrunk()$/;"	f
s:Path.tabnr	pack/preservim/start/nerdtree/lib/nerdtree/path.vim	/^function! s:Path.tabnr()$/;"	f
s:PathInfo	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PreparePathArgs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
s:PreviousFile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:ProjectionistDetect	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:QueryLog	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
s:QuickfixCreate	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixSet	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
s:ReadExec	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReadExec(line1, count, range, mods, env, args, options) abort$/;"	f
s:ReadPrepare	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:RebaseArgument	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Relative	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReloadStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:ReloadStatusBuffer	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
s:ReloadTabStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
s:ReloadWinStatus	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:Reltimefloat	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^  function! s:Reltimefloat(time)$/;"	f
s:Reltimefloat	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^  let s:Reltimefloat = function('reltimefloat')$/;"	v
s:Remote	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
s:Remove	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:Rename_complete	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:Rename_complete(A, L, P) abort$/;"	f
s:ReplaceCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:Resolve	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:RevertSubcommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Right	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^let s:Right = s:Go."\\<RIGHT>"$/;"	v
s:RunBufDelete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunClose	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
s:RunCloseIn	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
s:RunEcho	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
s:RunEdit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
s:RunExit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
s:RunFinished	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
s:RunJobs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunJobs() abort$/;"	f
s:RunReceive	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
s:RunSave	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
s:RunSend	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunTick	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
s:RunWait	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
s:SID	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:SID() abort$/;"	f
s:Selection	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:SilentSudoCmd	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SilentSudoCmd(editor) abort$/;"	f
s:Slash	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Slash	pack/tpope/start/fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:SplitExpandChain	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SquashArgument	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:StageApply	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageJump	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StageReveal	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:StatusCfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:SudoEditInit	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SudoEditInit() abort$/;"	f
s:SudoError	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SudoError() abort$/;"	f
s:SudoReadCmd	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SudoReadCmd() abort$/;"	f
s:SudoSetup	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SudoSetup(file) abort$/;"	f
s:SudoWriteCmd	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:SudoWriteCmd() abort$/;"	f
s:SystemError	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:TYPE	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:TempCmd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
s:TempDelete	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
s:TempReadPost	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:ToggleTabTreeVCS	pack/preservim/start/nerdtree/nerdtree_plugin/vcs.vim	/^function! s:ToggleTabTreeVCS(name)$/;"	f
s:ToolItems	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:Transform	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:Transform(algorithm,type) abort$/;"	f
s:TransformOpfunc	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:TransformOpfunc(type) abort$/;"	f
s:TransformSetup	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:TransformSetup(algorithm) abort$/;"	f
s:Tree	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	pack/tpope/start/fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeDirNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^let s:TreeDirNode = copy(g:NERDTreeFileNode)$/;"	v
s:TreeDirNode.AbsoluteTreeRoot	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
s:TreeDirNode.GetSelected	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
s:TreeDirNode.New	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.New(path, nerdtree)$/;"	f
s:TreeDirNode._glob	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._glob(pattern, all)$/;"	f
s:TreeDirNode._initChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
s:TreeDirNode._openInNewTab	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode._openInNewTab()$/;"	f
s:TreeDirNode.activate	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.activate(...)$/;"	f
s:TreeDirNode.addChild	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
s:TreeDirNode.close	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.close()$/;"	f
s:TreeDirNode.closeChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
s:TreeDirNode.createChild	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
s:TreeDirNode.displayString	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.displayString()$/;"	f
s:TreeDirNode.findNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
s:TreeDirNode.getCascade	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascade()$/;"	f
s:TreeDirNode.getCascadeRoot	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getCascadeRoot()$/;"	f
s:TreeDirNode.getChild	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
s:TreeDirNode.getChildByIndex	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
s:TreeDirNode.getChildCount	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
s:TreeDirNode.getChildIndex	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
s:TreeDirNode.getDirChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getDirChildren()$/;"	f
s:TreeDirNode.getVisibleChildCount	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
s:TreeDirNode.getVisibleChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
s:TreeDirNode.hasVisibleChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
s:TreeDirNode.isCascadable	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.isCascadable()$/;"	f
s:TreeDirNode.open	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.open(...)$/;"	f
s:TreeDirNode.openAlong	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openAlong(...)$/;"	f
s:TreeDirNode.openExplorer	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
s:TreeDirNode.openInNewTab	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
s:TreeDirNode.openRecursively	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
s:TreeDirNode.refresh	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refresh()$/;"	f
s:TreeDirNode.refreshDirFlags	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshDirFlags()$/;"	f
s:TreeDirNode.refreshFlags	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.refreshFlags()$/;"	f
s:TreeDirNode.removeChild	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
s:TreeDirNode.reveal	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.reveal(path, ...)$/;"	f
s:TreeDirNode.sortChildren	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
s:TreeDirNode.toggleOpen	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.toggleOpen(...)$/;"	f
s:TreeDirNode.transplantChild	pack/preservim/start/nerdtree/lib/nerdtree/tree_dir_node.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
s:TreeFileNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^let s:TreeFileNode = {}$/;"	v
s:TreeFileNode.GetRootForTab	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
s:TreeFileNode.GetSelected	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
s:TreeFileNode.New	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.New(path, nerdtree)$/;"	f
s:TreeFileNode._renderToString	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode._renderToString(depth, drawText)$/;"	f
s:TreeFileNode.activate	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.activate(...)$/;"	f
s:TreeFileNode.bookmark	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
s:TreeFileNode.cacheParent	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
s:TreeFileNode.clearBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.clearBookmarks()$/;"	f
s:TreeFileNode.copy	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
s:TreeFileNode.delete	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.delete()$/;"	f
s:TreeFileNode.displayString	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.displayString()$/;"	f
s:TreeFileNode.equals	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
s:TreeFileNode.findNode	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
s:TreeFileNode.findSibling	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
s:TreeFileNode.getNerdtree	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.getNerdtree()$/;"	f
s:TreeFileNode.isRoot	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
s:TreeFileNode.isVisible	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
s:TreeFileNode.open	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.open(...)$/;"	f
s:TreeFileNode.openExplorer	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openExplorer()$/;"	f
s:TreeFileNode.openInNewTab	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
s:TreeFileNode.openSplit	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
s:TreeFileNode.openVSplit	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
s:TreeFileNode.putCursorHere	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
s:TreeFileNode.refresh	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refresh()$/;"	f
s:TreeFileNode.refreshFlags	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.refreshFlags()$/;"	f
s:TreeFileNode.rename	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
s:TreeFileNode.renderToString	pack/preservim/start/nerdtree/lib/nerdtree/tree_file_node.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
s:TreeInfo	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:UI	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^let s:UI = {}$/;"	v
s:UI.IndentWid	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.IndentWid()$/;"	f
s:UI.MarkupReg	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.MarkupReg()$/;"	f
s:UI.New	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.New(nerdtree)$/;"	f
s:UI.UpDirLine	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.UpDirLine()$/;"	f
s:UI._dumpHelp	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._dumpHelp()$/;"	f
s:UI._indentLevelFor	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._indentLevelFor(line)$/;"	f
s:UI._renderBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._renderBookmarks()$/;"	f
s:UI._stripMarkup	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI._stripMarkup(line)$/;"	f
s:UI.centerView	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.centerView()$/;"	f
s:UI.getLineNum	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getLineNum(node)$/;"	f
s:UI.getPath	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getPath(ln)$/;"	f
s:UI.getRootLineNum	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getRootLineNum()$/;"	f
s:UI.getShowBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowBookmarks()$/;"	f
s:UI.getShowFiles	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowFiles()$/;"	f
s:UI.getShowHelp	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHelp()$/;"	f
s:UI.getShowHidden	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.getShowHidden()$/;"	f
s:UI.isIgnoreFilterEnabled	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isIgnoreFilterEnabled()$/;"	f
s:UI.isMinimal	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.isMinimal()$/;"	f
s:UI.render	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.render()$/;"	f
s:UI.renderViewSavingPosition	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.renderViewSavingPosition()$/;"	f
s:UI.restoreScreenState	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.restoreScreenState()$/;"	f
s:UI.saveScreenState	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.saveScreenState()$/;"	f
s:UI.setShowHidden	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.setShowHidden(val)$/;"	f
s:UI.toggleHelp	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleHelp()$/;"	f
s:UI.toggleIgnoreFilter	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleIgnoreFilter()$/;"	f
s:UI.toggleShowBookmarks	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowBookmarks()$/;"	f
s:UI.toggleShowFiles	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowFiles()$/;"	f
s:UI.toggleShowHidden	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleShowHidden()$/;"	f
s:UI.toggleZoom	pack/preservim/start/nerdtree/lib/nerdtree/ui.vim	/^function! s:UI.toggleZoom()$/;"	f
s:Uniq	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:UpdateIndex	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
s:UsableWin	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCommand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
s:UserCommandCwd	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
s:UserCommandList	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:VersionCheck	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
s:Wall	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:Wall() abort$/;"	f
s:WinShellEsc	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:_handleOldOptions	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:abbrev	pack/tpope/start/endwise/plugin/endwise.vim	/^function! s:abbrev()$/;"	f
s:action_for	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:activateAll	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateAll() abort$/;"	f
s:activateBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateBookmark(bm) abort$/;"	f
s:activateDirNode	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateDirNode(directoryNode, ...) abort$/;"	f
s:activateFileNode	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:activateFileNode(node) abort$/;"	f
s:add_background_matches_1	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:add_background_matches_1(line1, col1, line2, col2) " {{{1$/;"	f
s:add_db	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_matches	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:add_matches(corrlist, ...) " {{{1$/;"	f
s:add_methods	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:added_db_files	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:adjust_max	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^let s:adjust_max = 9$/;"	v
s:ag_handler	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
s:ag_to_qf	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
s:align_lists	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:alpha	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:alpha = 2.0\/(10+1)$/;"	v
s:anchor_regex	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:anchor_regex(re, cnum, method) " {{{1$/;"	f
s:ansi	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:arrow	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! s:arrow()$/;"	f
s:attached	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^let s:attached = {}$/;"	v
s:b64encode	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^function! s:b64encode(bytes, table, pad)$/;"	f
s:backspace	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:backspace(s)$/;"	f
s:bad_git_dir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:bang_edits	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vert Git', 'tabedit': 'tab Git', 'pedit': 'Git!'}$/;"	v
s:base_dir	pack/junegunn/start/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:beep	pack/tpope/start/surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:bin	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:blobdirs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:border_opt	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:btags_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buffer_line_handler	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buffer_prototype	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_type	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:buflisted	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:build_quickfix_list	options.vim	/^function! s:build_quickfix_list(lines)$/;"	f
s:bx	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^let s:bx = '{\\%("[^"]*"\\|''[^'']*''\\|\\$#\\|\\${\\w\\+}\\|\\$\\+\\|{[^{]\\+\\|[^{}]\\)\\{-}}'$/;"	v
s:cache	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:cache = {}$/;"	v
s:cache_project_root	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cache_valid	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:cache_valid = {}$/;"	v
s:calc_size	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callback	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:can_diffoff	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cap	pack/andymass/start/vim-matchup/test/new/test-loader/test.vim	/^let s:cap = b:matchup_delim_lists.delim_tex.regex_capture[0]$/;"	v
s:capture_group_sort	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:capture_group_sort(a, b) abort dict$/;"	f
s:cfile	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:chCwd	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chCwd(node) abort$/;"	f
s:chRoot	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:chRoot(node) abort$/;"	f
s:changesurround	pack/tpope/start/surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:check_requirements	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:checked	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:chomp	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:clikeft	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^let s:clikeft = [$/;"	v
s:closeChildren	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeChildren(node) abort$/;"	f
s:closeCurrentDir	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeCurrentDir(node) abort$/;"	f
s:closeTreeWindow	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:closeTreeWindow() abort$/;"	f
s:close_floating_win	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:close_floating_win() " {{{1$/;"	f
s:closematch	pack/tpope/start/surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cmd	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:collect	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:command_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commits	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:commondirs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_binary_versions	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_versions	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:complete_insert	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:completer	pack/andymass/start/vim-matchup/test/legacy/forwhile.vim	/^              let s:completer.context = matchstr(l:line, '\\S*$')$/;"	v
s:completer	pack/andymass/start/vim-matchup/test/legacy/forwhile.vim	/^          let s:completer = l:completer$/;"	v
s:completer	pack/andymass/start/vim-matchup/test/legacy/tabs.vim	/^				let s:completer.context = matchstr(l:line, '\\S*$')$/;"	v
s:completer	pack/andymass/start/vim-matchup/test/legacy/tabs.vim	/^		let s:completer = l:completer$/;"	v
s:config	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:corresponding	pack/andymass/start/vim-matchup/test/new/test-delim/test.vim	/^let s:corresponding = matchup#delim#get_matching(s:current)$/;"	v
s:cpath	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:cpo_save	pack/andymass/start/vim-matchup/test/legacy/rtp/ftplugin/matchuptest.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:create_popup	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function s:create_popup(hl, opts) abort$/;"	f
s:create_popup	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! s:create_popup(hl, opts) abort$/;"	f
s:crend	pack/tpope/start/endwise/plugin/endwise.vim	/^function! s:crend(always)$/;"	f
s:csi	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:cur	pack/andymass/start/vim-matchup/test/new/test-loader/test.vim	/^let s:cur = matchup#delim#get_current('all', 'both')$/;"	v
s:cur	pack/andymass/start/vim-matchup/test/new/test-loader/test.vim	/^let s:cur = matchup#delim#get_current('all', 'both_all')$/;"	v
s:curpos	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^let s:curpos = []$/;"	v
s:current	pack/andymass/start/vim-matchup/test/new/test-delim/test.vim	/^let s:current = matchup#delim#get_current('all', 'both')$/;"	v
s:cursor_options	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:cursor_options() abort$/;"	f
s:customOpenBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenBookmark(node) abort$/;"	f
s:customOpenDir	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenDir(node) abort$/;"	f
s:customOpenFile	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:customOpenFile(node) abort$/;"	f
s:custom_counter	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^  let s:custom_counter = 0$/;"	v
s:custom_opts	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^  let s:custom_opts = {}$/;"	v
s:default_action	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_layout	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:default_register	pack/tpope/start/repeat/autoload/repeat.vim	/^function! s:default_register()$/;"	f
s:defaults	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:defs	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delete	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:delete(s)$/;"	f
s:deleteBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:deleteBookmark(bookmark) abort$/;"	f
s:did_check_exe	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff_modifier	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
s:diff_restore	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dirArrows	pack/preservim/start/nerdtree/syntax/nerdtree.vim	/^    let s:dirArrows = escape(g:NERDTreeDirArrowCollapsible, '~]\\-').escape(g:NERDTreeDirArrowEx/;"	v
s:dir_for_worktree	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:disable_colors	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:displayHelp	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:displayHelp() abort$/;"	f
s:do_offscreen	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:do_offscreen(current, method) " {{{1$/;"	f
s:do_offscreen_popup	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:do_offscreen_popup(offscreen) " {{{1$/;"	f
s:do_offscreen_popup_nvim	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:do_offscreen_popup_nvim(offscreen) " {{{1$/;"	f
s:do_offscreen_statusline	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:do_offscreen_statusline(offscreen, manual) " {{{1$/;"	f
s:do_tests	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:do_tests(bang, ...)$/;"	f
s:dollar_add	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^function! s:dollar_add(base,no) abort$/;"	f
s:dopopd	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dosurround	pack/tpope/start/surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:edit_jobs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:eff_curpos	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:eff_curpos = [1, 1]$/;"	v
s:effcol	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:effcol(expr)$/;"	f
s:effline	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:effline(expr)$/;"	f
s:emmet_settings	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^let s:emmet_settings = {$/;"	v
s:emmet_unittest_complete	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:emmet_unittest_complete(arglead, cmdline, cmdpos)$/;"	f
s:enc_to_cp	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:engines	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:engines = {$/;"	v
s:ensure_match_popup	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:ensure_match_popup() abort " {{{1$/;"	f
s:ensure_scroll_timer	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:ensure_scroll_timer() " {{{1$/;"	f
s:entries	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:entries(path) abort$/;"	f
s:error	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error_file	pack/tpope/start/eunuch/plugin/eunuch.vim	/^let s:error_file = tempname()$/;"	v
s:escape	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:escape(str)$/;"	f
s:eval	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:evaluate_opts	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:excmds	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec_paths	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executables	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:execute	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_term	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exists	pack/mattn/start/emmet-vim/autoload/emmet/lang.vim	/^let s:exists = {}$/;"	v
s:exit_handler	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:extend	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extractafter	pack/tpope/start/surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	pack/tpope/start/surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:fade_timer_callback	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:fade_timer_callback(win_id, timer_id) abort " {{{1$/;"	f
s:fail	pack/andymass/start/vim-matchup/autoload/matchup/test.vim	/^function! s:fail(...) abort " {{{1$/;"	f
s:fcall	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:fcall(fn, path, ...) abort$/;"	f
s:ffn	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:ffn(fn, path) abort$/;"	f
s:file	pack/andymass/start/vim-matchup/autoload/matchup/misc.vim	/^let s:file = expand('<sfile>')$/;"	v
s:file_commit_pattern	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_options	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_pattern	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:file_source	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:fill_quickfix	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:filtermx	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^let s:filtermx = '|\\(\\%(bem\\|html\\|blade\\|haml\\|slim\\|e\\|c\\|s\\|fc\\|xsl\\|t\\|\\\/[^ ]/;"	v
s:findAndRevealPath	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:findAndRevealPath(pathStr) abort$/;"	f
s:find_open_window	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:first_line	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fixindent	pack/tpope/start/surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flag	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fmt_excmd	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnameescape	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:fnameescape(string) abort$/;"	f
s:fnameescape	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:fnameescape	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:fnameescape(file) abort$/;"	f
s:force	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:force(wise)$/;"	f
s:format_cmd	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_gutter	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:format_gutter(lnum, ...) " {{{1$/;"	f
s:format_mark	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_win	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:forward	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^function! s:forward(fn, ...)$/;"	f
s:forward	pack/andymass/start/vim-matchup/autoload/matchup/ts_syntax.vim	/^function! s:forward(fn, ...) abort$/;"	f
s:ftcheck	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^function! s:ftcheck(fts) abort " {{{1$/;"	f
s:function	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:fzf	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_restore_colors	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:generate_wildignore_options	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:get_backref	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:get_backref(groups, bref, warn)$/;"	f
s:get_color	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_ctags_executable	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_delim	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:get_delim(opts) abort " {{{1$/;"	f
s:get_delim_multi	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:get_delim_multi(opts) " {{{1$/;"	f
s:get_git_root	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_match_words	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^function! s:get_match_words()$/;"	f
s:get_matching_delims	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:get_matching_delims(down, stopline) dict abort " {{{1$/;"	f
s:get_version	pack/junegunn/start/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:getchar	pack/tpope/start/surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:geteffline	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:geteffline(expr)$/;"	f
s:getline	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:getline()$/;"	f
s:getpos	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_versions	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:given_range	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:globsubs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go	pack/tpope/start/commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
s:gsub	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:handleLeftClick	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleLeftClick() abort$/;"	f
s:handleMiddleMouse	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:handleMiddleMouse() abort$/;"	f
s:has_any	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_plugin	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^function! s:has_plugin(plug)$/;"	f
s:hash_colors	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:helptag_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:highlight_background	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:highlight_background(corrlist) " {{{1$/;"	f
s:highlight_keys	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_surrounding	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:highlight_surrounding(insertmode, current) " {{{1$/;"	f
s:history	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:htmllikeft	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^let s:htmllikeft = [$/;"	v
s:in_indentexpr	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^function! s:in_indentexpr()$/;"	f
s:indexes	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:initCustomOpenArgs	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:initCustomOpenArgs() abort$/;"	f
s:init_default_mappings	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:init_default_mappings()$/;"	f
s:init_delim_lists	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:init_delim_lists(use_match_words) abort " {{{1$/;"	f
s:init_delim_lists_fast	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:init_delim_lists_fast(mps) abort " {{{1$/;"	f
s:init_delim_regexes	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:init_delim_regexes() abort " {{{1$/;"	f
s:init_delim_regexes_generator	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:init_delim_regexes_generator(list_name) abort " {{{1$/;"	f
s:init_delim_skip	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^function! s:init_delim_skip() abort "{{{1$/;"	f
s:init_modules	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:init_modules()$/;"	f
s:init_oldstyle_ops	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:init_oldstyle_ops() " {{{1$/;"	f
s:init_option	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:init_option(option, default)$/;"	f
s:init_options	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:init_options()$/;"	f
s:inject_snippet	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:inputPrompt	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:inputPrompt(action)$/;"	f
s:inputreplacement	pack/tpope/start/surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	pack/tpope/start/surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	pack/tpope/start/surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:install_plugin	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^function! s:install_plugin(mode, buffer)$/;"	f
s:invert_skip	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:invert_skip = 0$/;"	v
s:is_win	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	pack/junegunn/start/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:item_pattern	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:itemno	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! s:itemno(itemno, current) abort$/;"	f
s:jump	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:jumpToChild	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToChild(node, last) abort$/;"	f
s:jumpToFirstChild	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToFirstChild(node) abort$/;"	f
s:jumpToLastChild	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToLastChild(node) abort$/;"	f
s:jumpToNextSibling	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToNextSibling(node) abort$/;"	f
s:jumpToParent	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToParent(node) abort$/;"	f
s:jumpToPrevSibling	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToPrevSibling(node) abort$/;"	f
s:jumpToRoot	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToRoot() abort$/;"	f
s:jumpToSibling	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:jumpToSibling(node, forward) abort$/;"	f
s:keyMaps	pack/preservim/start/nerdtree/lib/nerdtree/key_map.vim	/^let s:keyMaps = {}$/;"	v
s:key_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:known_files	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:last_time	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:launcher	pack/junegunn/start/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	pack/junegunn/start/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:left	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:left(s)$/;"	f
s:legacy_option_map	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:legacy_option_map(letter) abort$/;"	f
s:line_handler	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:linechars	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:loaded	pack/tpope/start/eunuch/plugin/eunuch.vim	/^  let s:loaded = {}$/;"	v
s:localvar	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^function! s:localvar(current, key) abort$/;"	f
s:log	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:log(msg)$/;"	f
s:log_diff_context	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:logging	pack/mattn/start/emmet-vim/unittest.vim	/^let s:logging = 0$/;"	v
s:logn	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:logn(msg)$/;"	f
s:make_oldstyle_omaps	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:make_oldstyle_omaps(lhs, rhs)$/;"	f
s:manual_update_tags	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^  function! s:map(mode, lhs, rhs, ...)$/;"	f
s:map	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:map(...) abort$/;"	f
s:maps	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:maps() abort$/;"	f
s:maps	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^let s:maps = []$/;"	v
s:mark_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:match_word_cache	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^let s:match_word_cache = {}$/;"	v
s:matchbegin	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchbegin(text, close)$/;"	f
s:matchend	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:matchend(text, open)$/;"	f
s:matching	pack/andymass/start/vim-matchup/test/new/test-loader/test.vim	/^let s:matching = matchup#delim#get_matching(s:cur)$/;"	v
s:matchparen	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^let s:matchparen = {}$/;"	v
s:matchparen.clear	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:matchparen.clear() abort dict " {{{1$/;"	f
s:matchparen.fade	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:matchparen.fade(level, pos, token) abort dict " {{{1$/;"	f
s:matchparen.highlight	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:matchparen.highlight(...) abort dict " {{{1$/;"	f
s:matchparen.highlight_deferred	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:matchparen.highlight_deferred() abort dict " {{{1$/;"	f
s:matchparen.transmute_reset	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function s:matchparen.transmute_reset() abort dict$/;"	f
s:matchstrpos	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^  function! s:matchstrpos(expr, pat, start) abort$/;"	f
s:merge_heads	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:merge_opts	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:min_version	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:misc_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:misc_init_module() " {{{1$/;"	f
s:mkdir_p	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:mkdir_p(path) abort$/;"	f
s:motion_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:motion_init_module() " {{{1$/;"	f
s:mx	pack/mattn/start/emmet-vim/autoload/emmet/lang/html.vim	/^let s:mx = '\\([+>]\\|[<^]\\+\\)\\{-}'$/;"	v
s:mysearchpair	pack/tpope/start/endwise/plugin/endwise.vim	/^function! s:mysearchpair(beginpat,endpat,synidpat)$/;"	f
s:nbs	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:nbsl	pack/andymass/start/vim-matchup/autoload/matchup/re.vim	/^let s:nbsl = '\\v%(\\\\@<!%(\\\\\\\\)*)@<=\\m'$/;"	v
s:nomodeline	pack/tpope/start/eunuch/plugin/eunuch.vim	/^let s:nomodeline = v:version > 703 ? '<nomodeline>' : ''$/;"	v
s:not_bslash	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^let s:not_bslash = '\\v%(\\\\@<!%(\\\\\\\\)*)@4<=\\m'$/;"	v
s:nowait	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:ns_id	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  let s:ns_id = nvim_create_namespace('vim-matchup')$/;"	v
s:nvim_job_exit_wrapper	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:old_cpo	pack/preservim/start/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpoptions$/;"	v
s:old_style_ops	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^let s:old_style_ops = !(has('patch-8.1.0648') || has('nvim-0.5.0'))$/;"	v
s:open	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:openExplorer	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openExplorer(node) abort$/;"	f
s:openHSplit	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplit(target) abort$/;"	f
s:openHSplitBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openHSplitBookmark(bm) abort$/;"	f
s:openInNewTab	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTab(target) abort$/;"	f
s:openInNewTabSilent	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openInNewTabSilent(target) abort$/;"	f
s:openNodeRecursively	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openNodeRecursively(node) abort$/;"	f
s:openVSplit	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplit(target) abort$/;"	f
s:openVSplitBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:openVSplitBookmark(bm) abort$/;"	f
s:opfunc	pack/tpope/start/surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	pack/tpope/start/surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:option_map	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:option_map(letter, option, mode) abort$/;"	f
s:pairtrans	pack/andymass/start/vim-matchup/autoload/matchup/surround.vim	/^let s:pairtrans = split('()<>[]{}«»“”', '\\ze')$/;"	v
s:parse_args	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^function! s:parse_args(args) " {{{1$/;"	f
s:parser_delim_new	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:parser_delim_new(lnum, cnum, opts) " {{{1$/;"	f
s:path	pack/andymass/start/vim-matchup/test/legacy/addrtp.vim	/^let s:path = expand('<sfile>:h')$/;"	v
s:path	pack/andymass/start/vim-matchup/test/legacy/bootstrap.vim	/^let s:path = simplify(expand('<sfile>:h').'\/..')$/;"	v
s:path_subcommands	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:permlookup	pack/tpope/start/eunuch/plugin/eunuch.vim	/^let s:permlookup = ['---','--x','-w-','-wx','r--','r-x','rw-','rwx']$/;"	v
s:pi_paren_sid	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:pi_paren_sid() " {{{1$/;"	f
s:pi_paren_sid	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^let s:pi_paren_sid = -1$/;"	v
s:pluck	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:populate_floating_win	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:populate_floating_win(offscreen) " {{{1$/;"	f
s:popup	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_support	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:prepare_env	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prepend_opts	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:previewBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewBookmark(bookmark) abort$/;"	f
s:previewNodeCurrent	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeCurrent(node) abort$/;"	f
s:previewNodeHSplit	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplit(node) abort$/;"	f
s:previewNodeHSplitBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeHSplitBookmark(bookmark) abort$/;"	f
s:previewNodeVSplit	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplit(node) abort$/;"	f
s:previewNodeVSplitBookmark	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:previewNodeVSplitBookmark(bookmark) abort$/;"	f
s:print_short	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! s:print_short() " {{{1$/;"	f
s:print_verbose	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^function! s:print_verbose() " {{{1$/;"	f
s:process	pack/tpope/start/surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_hlend	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^function! s:process_hlend(re, cursorpos) " {{{1$/;"	f
s:process_options_file	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:promptToDelBuffer	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
s:pushd	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:putline	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:putline(how, map) abort$/;"	f
s:qescape	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^function! s:qescape(str)$/;"	f
s:rebase_abbrevs	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:redirects	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:redraw	pack/tpope/start/surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reduce_line	pack/junegunn/start/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:ref_header	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:refreshCurrent	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshCurrent(node) abort$/;"	f
s:refreshRoot	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:refreshRoot() abort$/;"	f
s:reindent	pack/tpope/start/surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:reload	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:reload(d)$/;"	f
s:reltimefloat	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  function! s:reltimefloat(time)$/;"	f
s:remove_layout	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:renameBuffer	pack/preservim/start/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:renameBuffer(bufNum, newNodeName, isDirectory)$/;"	f
s:repo_bare	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_prepare	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
s:repo_prototype	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:repos	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:resume_queue	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:reuseWin	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^function! s:reuseWin(dir) abort$/;"	f
s:reverse_list	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:right	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:right(s)$/;"	f
s:rootNERDTreePath	pack/preservim/start/nerdtree/autoload/nerdtree.vim	/^let s:rootNERDTreePath = resolve(expand('<sfile>:p:h:h'))$/;"	v
s:runner_exe	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/cpp_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/fortran_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/html_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/janet_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/lua_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/ruby_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/typescriptreact_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/vim_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/after/ftplugin/xml_matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/custom.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/motion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/pos.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/quirks.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/surround.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/text_obj.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/transmute.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/ts_engine.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/ts_syntax.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/andymass/start/vim-matchup/autoload/matchup/where.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	pack/mattn/start/emmet-vim/autoload/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:search_history_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:section_commit_pattern	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:seed	pack/mattn/start/emmet-vim/autoload/emmet/util.vim	/^let s:seed = localtime()$/;"	v
s:separator	pack/tpope/start/eunuch/plugin/eunuch.vim	/^function! s:separator()$/;"	f
s:setup_match_words	pack/andymass/start/vim-matchup/after/ftplugin/tex_matchup.vim	/^function! s:setup_match_words()$/;"	f
s:setup_paste	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:setup_paste() abort$/;"	f
s:setup_styledEmmetAbbreviation	pack/mattn/start/emmet-vim/plugin/emmet.vim	/^function! s:setup_styledEmmetAbbreviation() abort$/;"	f
s:sfile	pack/mattn/start/emmet-vim/unittest.vim	/^let s:sfile = expand('<sfile>')$/;"	v
s:shellesc	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shortpath	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:showMenu	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:showMenu(node) abort$/;"	f
s:show_category	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_category(category)$/;"	f
s:show_done	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_done()$/;"	f
s:show_ng	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_ng(no, expect, got)$/;"	f
s:show_ok	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_ok()$/;"	f
s:show_pass	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_pass(pass)$/;"	f
s:show_skip	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_skip(no, title)$/;"	f
s:show_title	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_title(no, title)$/;"	f
s:show_type	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:show_type(type)$/;"	f
s:sid	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^let s:sid = printf("\\<SNR>%d_", s:snr())$/;"	v
s:sidedict	pack/andymass/start/vim-matchup/autoload/matchup/loader.vim	/^let s:sidedict = {$/;"	v
s:snr	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:snr()$/;"	f
s:sortByLength	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:sortByLength(i1, i2)$/;"	f
s:sort_buffers	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sort_by_last	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^function! s:sort_by_last(a, b)$/;"	f
s:split	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:splittable	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:statusbump	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:statusbump() abort$/;"	f
s:stopline	pack/andymass/start/vim-matchup/autoload/matchup/delim.vim	/^let s:stopline = get(g:, 'matchup_delim_stopline', 1500)$/;"	v
s:string_decode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:string_decode(str) abort$/;"	f
s:string_encode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:string_encode(str) abort$/;"	f
s:strip	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_white_space	pack/tpope/start/commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:sub	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:subcommands_before_2_5	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:surround_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:surround_init_module() " {{{1$/;"	f
s:surroundings	pack/tpope/start/commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:synID	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^  function s:synID(lnum, col, trans)$/;"	f
s:synid	pack/tpope/start/endwise/plugin/endwise.vim	/^function! s:synid()$/;"	f
s:tags_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:teardownMappings	pack/tpope/start/endwise/plugin/endwise.vim	/^function! s:teardownMappings()$/;"	f
s:temp_files	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_scripts	pack/tpope/start/fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:term_marker	pack/junegunn/start/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	pack/junegunn/start/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:test	pack/andymass/start/vim-matchup/test/issues/15/gc.vim	/^function! s:test()$/;"	f
s:test	pack/andymass/start/vim-matchup/test/issues/16/any.vim	/^function! s:test()$/;"	f
s:test	pack/mattn/start/emmet-vim/unittest.vim	/^function! s:test(...)$/;"	f
s:text_obj_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:text_obj_init_module() " {{{1$/;"	f
s:textobject	pack/tpope/start/commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:throw	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:time_start	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:time_start = {}$/;"	v
s:timeout	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:timeout = 0$/;"	v
s:timeout_enabled	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:timeout_enabled = 0$/;"	v
s:timeout_pulse_time	pack/andymass/start/vim-matchup/autoload/matchup/perf.vim	/^let s:timeout_pulse_time = reltime()$/;"	v
s:timer_callback	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:timer_callback(win_id, timer_id) abort " {{{1$/;"	f
s:tmux_enabled	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:toggle	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:toggle(op) abort$/;"	f
s:toggleIgnoreFilter	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleIgnoreFilter() abort$/;"	f
s:toggleShowBookmarks	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowBookmarks() abort$/;"	f
s:toggleShowFiles	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowFiles() abort$/;"	f
s:toggleShowHidden	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleShowHidden() abort$/;"	f
s:toggleZoom	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:toggleZoom() abort$/;"	f
s:tree_up_dir_line	pack/preservim/start/nerdtree/syntax/nerdtree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:trees	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:treesitter_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:treesitter_init_module() " {{{1$/;"	f
s:ulen	pack/jiangmiao/start/auto-pairs/plugin/auto-pairs.vim	/^func! s:ulen(s)$/;"	f
s:unix_redir	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:upDirCurrentRootClosed	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootClosed() abort$/;"	f
s:upDirCurrentRootOpen	pack/preservim/start/nerdtree/autoload/nerdtree/ui_glue.vim	/^function! s:upDirCurrentRootOpen() abort$/;"	f
s:update_in_progress	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_tags	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:url_decode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:url_decode(str) abort$/;"	f
s:url_encode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:url_encode(str) abort$/;"	f
s:use_sh	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:validate_layout	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:var	pack/tpope/start/fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (/;"	v
s:version_requirement	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	pack/junegunn/start/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:warn	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warned	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:where_init_module	pack/andymass/start/vim-matchup/autoload/matchup.vim	/^function! s:where_init_module() " {{{1$/;"	f
s:wide	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:windows_sink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winshell	pack/tpope/start/fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:wordish	pack/andymass/start/vim-matchup/autoload/matchup/matchparen.vim	/^function! s:wordish(delim)$/;"	f
s:worktree_for_dir	pack/tpope/start/fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	pack/tpope/start/surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_cmds	pack/junegunn/start/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrapreg	pack/tpope/start/surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	pack/ludovicchabant/start/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:xml_decode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:xml_decode(str) abort$/;"	f
s:xml_encode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:xml_encode(str) abort$/;"	f
s:xml_entity_decode	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^function! s:xml_entity_decode(str) abort$/;"	f
s:xterm_launcher	pack/junegunn/start/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
scan	pack/junegunn/start/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scoreGapExtention	pack/junegunn/start/fzf/src/algo/algo.go	/^	scoreGapExtention = -1$/;"	c	package:algo
scoreGapStart	pack/junegunn/start/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	pack/junegunn/start/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scroll	pack/junegunn/start/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollable	pack/junegunn/start/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
searchRequest	pack/junegunn/start/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
selectItem	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
select_count	pack/junegunn/start/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:Tmux.until
selected	pack/junegunn/start/fzf/src/terminal.go	/^	selected     map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	pack/junegunn/start/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	pack/junegunn/start/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
send_keys	pack/junegunn/start/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
set	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function set(_, key, value, bytes)$/;"	f
setBg	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	struct:tui.LightWindow
setNewest	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/lru.lua	/^    local function setNewest(tuple)$/;"	f
set_var	pack/junegunn/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
set_var	pack/junegunn/start/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
setup	pack/junegunn/start/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	pack/junegunn/start/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setupTerminal	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
shape	pack/junegunn/start/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
sigstop	pack/junegunn/start/fzf/src/terminal.go	/^	sigstop      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
size	pack/junegunn/start/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	pack/junegunn/start/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	pack/junegunn/start/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
slab	pack/junegunn/start/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	pack/junegunn/start/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	pack/junegunn/start/fzf/src/terminal.go	/^	slab         *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	pack/junegunn/start/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	pack/junegunn/start/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
slice	pack/junegunn/start/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	pack/junegunn/start/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
smcup	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
somemodule	pack/andymass/start/vim-matchup/test/issues/107/bug.sv	/^module somemodule$/;"	m
sort	pack/junegunn/start/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	pack/junegunn/start/fzf/src/matcher.go	/^	sort       bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	pack/junegunn/start/fzf/src/terminal.go	/^	sort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	pack/junegunn/start/fzf/src/terminal.go	/^	sort    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	pack/junegunn/start/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sortable	pack/junegunn/start/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	pack/junegunn/start/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
spinner	pack/junegunn/start/fzf/src/terminal.go	/^	spinner      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	pack/junegunn/start/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	pack/junegunn/start/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	pack/junegunn/start/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
split	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  local function split(string)$/;"	f
splitNth	pack/junegunn/start/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf	typeref:typename:[]Range
startChan	pack/junegunn/start/fzf/src/terminal.go	/^	startChan    chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
startEventPoller	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
state	pack/junegunn/start/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
stderr	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	pack/junegunn/start/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	pack/junegunn/start/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	struct:tui.LightWindow
store_dir	pack/andymass/start/vim-matchup/test/issues/36/image_uploader.rb	/^   def store_dir$/;"	f
str	pack/junegunn/start/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	pack/junegunn/start/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
strong	pack/junegunn/start/fzf/src/terminal.go	/^	strong       tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
style	pack/junegunn/start/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
suppress	pack/junegunn/start/fzf/src/terminal.go	/^	suppress     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
surround.vim	pack/tpope/start/surround/README.markdown	/^# surround.vim$/;"	c
synID	pack/andymass/start/vim-matchup/lua/treesitter-matchup/syntax.lua	/^    synID = function(lnum, col, transparent)$/;"	f
sysinfo	pack/andymass/start/vim-matchup/test/new/Makefile	/^sysinfo:$/;"	t
t	pack/junegunn/start/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tabstop	pack/junegunn/start/fzf/src/terminal.go	/^	tabstop      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	pack/junegunn/start/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	pack/junegunn/start/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tac	pack/junegunn/start/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	pack/junegunn/start/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
target/$(BINARY32)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	pack/junegunn/start/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
teardown	pack/junegunn/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	pack/junegunn/start/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template	pack/junegunn/start/fzf/src/terminal.go	/^	template string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
tempname	pack/junegunn/start/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	pack/junegunn/start/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	pack/junegunn/start/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	pack/junegunn/start/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	pack/junegunn/start/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	pack/junegunn/start/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	pack/junegunn/start/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	pack/junegunn/start/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSuffix	pack/junegunn/start/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	pack/junegunn/start/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	pack/junegunn/start/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
test	pack/andymass/start/vim-matchup/test/issues/33/test.rb	/^    def test $/;"	f	class:LoremIpsum.Lorem
test	pack/andymass/start/vim-matchup/test/new/Makefile	/^test: $(TESTS)$/;"	t
test	pack/andymass/start/vim-matchup/test/new/test-delim/Makefile	/^test:$/;"	t
test	pack/andymass/start/vim-matchup/test/new/test-loader/Makefile	/^test:$/;"	t
test	pack/junegunn/start/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	pack/mattn/start/emmet-vim/Makefile	/^test:$/;"	t
test/*	pack/andymass/start/vim-matchup/.projections.json	/^  "test\/*": {"type": "test"}$/;"	o
testParserReference	pack/junegunn/start/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_accept_non_empty	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_backward_delete_char_eof	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestGoFZF
test_backward_eof	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestGoFZF
test_bind	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_first_last	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestGoFZF
test_change_prompt	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestGoFZF
test_clear_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestGoFZF
test_clear_selection	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestGoFZF
test_close	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestGoFZF
test_complete_quoted_command	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	module:TestShell
test_ctrl_r_multiline	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_custom_completion_api	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	module:CompletionTest
test_cycle	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_dir_completion	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_disabled	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestGoFZF
test_dynamic_completion_loader	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_fzf_default_command	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_header	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_history	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_info_hidden	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestGoFZF
test_interrupt_execute	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestGoFZF
test_invalid_cache	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_jump	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_keep_right	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestGoFZF
test_key_bindings	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_kill_default_command_on_abort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestGoFZF
test_kill_default_command_on_accept	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestGoFZF
test_kill_reload_command_on_abort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestGoFZF
test_kill_reload_command_on_accept	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestGoFZF
test_long_line	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_marker	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestGoFZF
test_multi_max	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestGoFZF
test_multi_order	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_normalized_match	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestGoFZF
test_or_operator	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_partial_caching	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_pointer	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestGoFZF
test_pointer_with_jump	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestGoFZF
test_preview	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_bindings_with_default_preview	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestGoFZF
test_preview_bindings_without_default_preview	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestGoFZF
test_preview_clear_screen	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_file	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestGoFZF
test_preview_flags	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_header	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestGoFZF
test_preview_hidden	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_scroll_begin_and_offset	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestGoFZF
test_preview_scroll_begin_constant	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestGoFZF
test_preview_scroll_begin_expr	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestGoFZF
test_preview_size_0	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_update_on_select	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_preview_window_follow	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestGoFZF
test_process_completion	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_query_unicode	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_reload	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestGoFZF
test_reload_even_when_theres_no_match	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestGoFZF
test_scroll	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_select_1	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_select_deselect	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_strip_xterm_osc_sequence	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestGoFZF
test_sync	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_end	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_preview_wrap	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestGoFZF
test_toggle_sort	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_unbind	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_unbind$/;"	f	class:TestGoFZF
test_unicode_case	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	pack/junegunn/start/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
text	pack/junegunn/start/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	pack/junegunn/start/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	pack/junegunn/start/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	pack/junegunn/start/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	pack/junegunn/start/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
theme	pack/junegunn/start/fzf/src/terminal.go	/^	theme        *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	pack/junegunn/start/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	pack/junegunn/start/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
timeoutInterval	pack/junegunn/start/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
tmux	pack/junegunn/start/fzf/test/test_go.rb	/^  attr_reader :tmux$/;"	A	class:TestBase
tmux_args=	pack/junegunn/start/fzf/bin/fzf-tmux	/^tmux_args=()$/;"	f
toActions	pack/junegunn/start/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f	package:fzf	typeref:typename:[]action
toAnsiString	pack/junegunn/start/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toggleItem	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	pack/junegunn/start/fzf/src/terminal.go	/^	toggleSort   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
tohtml	pack/andymass/start/vim-matchup/test/lang/lua/tohtml.lua	/^function tohtml(x)$/;"	f
tohtml_table	pack/andymass/start/vim-matchup/test/lang/lua/tohtml.lua	/^function tohtml_table(x, table_level)$/;"	f
top	pack/junegunn/start/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	pack/junegunn/start/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
topLeft	pack/junegunn/start/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	pack/junegunn/start/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
trans	pack/junegunn/start/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transformInput	pack/junegunn/start/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	pack/junegunn/start/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
trimLeft	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	pack/junegunn/start/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	pack/junegunn/start/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimQuery	pack/junegunn/start/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
truncateQuery	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
trySkip	pack/junegunn/start/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	pack/junegunn/start/fzf/install	/^try_curl() {$/;"	f
try_wget	pack/junegunn/start/fzf/install	/^try_wget() {$/;"	f
ttyin	pack/junegunn/start/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	pack/junegunn/start/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	pack/junegunn/start/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	pack/junegunn/start/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
tui	pack/junegunn/start/fzf/src/terminal.go	/^	tui          tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	pack/junegunn/start/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/light.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	pack/junegunn/start/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	pack/junegunn/start/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
type	pack/andymass/start/vim-matchup/.projections.json	/^  "README.md": {"type": "readme"},$/;"	s	object:README.md
type	pack/andymass/start/vim-matchup/.projections.json	/^  "after\/*.vim": {"type": "after"},$/;"	s	object:after/*.vim
type	pack/andymass/start/vim-matchup/.projections.json	/^  "autoload\/*.vim": {"type": "autoload"},$/;"	s	object:autoload/*.vim
type	pack/andymass/start/vim-matchup/.projections.json	/^  "doc\/*.txt": {"type": "doc"},$/;"	s	object:doc/*.txt
type	pack/andymass/start/vim-matchup/.projections.json	/^  "plugin\/*.vim": {"type": "plugin"},$/;"	s	object:plugin/*.vim
type	pack/andymass/start/vim-matchup/.projections.json	/^  "test\/*": {"type": "test"}$/;"	s	object:test/*
u	pack/tpope/start/repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
u%	pack/andymass/start/vim-matchup/test/issues/59/rebind.vim	/^omap u% <plug>(matchup-i%)$/;"	m
u%	pack/andymass/start/vim-matchup/test/issues/59/rebind.vim	/^xmap u% <plug>(matchup-i%)$/;"	m
unicode	pack/junegunn/start/fzf/src/terminal.go	/^	unicode      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
unimpaired.vim	pack/tpope/start/unimpaired/README.markdown	/^# unimpaired.vim$/;"	c
unimpaired_paste	pack/tpope/start/unimpaired/plugin/unimpaired.vim	/^  augroup unimpaired_paste$/;"	a
unset_var	pack/junegunn/start/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
until	pack/junegunn/start/fzf/test/test_go.rb	/^  def until(refresh = false)$/;"	f	class:Tmux
upOneLine	pack/junegunn/start/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	pack/junegunn/start/fzf/Makefile	/^update:$/;"	t
updatePromptOffset	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	pack/junegunn/start/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	pack/junegunn/start/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
update_cached_matches	pack/andymass/start/vim-matchup/lua/treesitter-matchup/third-party/query.lua	/^  local function update_cached_matches(bufnr, changed_tick, query_group)$/;"	f
usage	pack/junegunn/start/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
use_raw_list	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	pack/ludovicchabant/start/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
util	pack/junegunn/start/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/chars.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/chars_test.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/eventbox.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/slab.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/util.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/util_test.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/util_unix.go	/^package util$/;"	p
util	pack/junegunn/start/fzf/src/util/util_windows.go	/^package util$/;"	p
validateSign	pack/junegunn/start/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
version	pack/junegunn/start/fzf/install.ps1	/^$version="0.27.2"$/;"	v
version	pack/junegunn/start/fzf/main.go	/^var version string = "0.27"$/;"	v	package:main	typeref:typename:string
version	pack/junegunn/start/fzf/src/terminal.go	/^	version      int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	pack/junegunn/start/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	pack/junegunn/start/fzf/src/terminal.go	/^	version  int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	pack/junegunn/start/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
vertical	pack/junegunn/start/fzf/src/tui/tui.go	/^	vertical    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
vim match-up	pack/andymass/start/vim-matchup/README.md	/^# vim match-up$/;"	c
vim-script	pack/andymass/start/vim-matchup/README.md	/^#### vim-script$/;"	t	subsection:vim match-up""Features""Detailed feature documentation
vimtex, for LaTeX documents	pack/andymass/start/vim-matchup/README.md	/^### vimtex, for LaTeX documents$/;"	S	section:vim match-up""Interoperability
vmove	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	pack/junegunn/start/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
wait	pack/junegunn/start/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	pack/junegunn/start/fzf/test/test_go.rb	/^def wait$/;"	f
whiteSuffix	pack/junegunn/start/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
width	pack/junegunn/start/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	pack/junegunn/start/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	pack/junegunn/start/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	pack/junegunn/start/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
win	pack/junegunn/start/fzf/test/test_go.rb	/^  attr_reader :win$/;"	A	class:Tmux
window	pack/junegunn/start/fzf/src/terminal.go	/^	window       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	pack/junegunn/start/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
withIndex	pack/junegunn/start/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withPrefixLengths	pack/junegunn/start/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
wordNext	pack/junegunn/start/fzf/src/terminal.go	/^	wordNext     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	pack/junegunn/start/fzf/src/terminal.go	/^	wordRubout   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrap	pack/junegunn/start/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrapLine	pack/junegunn/start/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapped.newsink	pack/junegunn/start/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	pack/junegunn/start/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writeTemporaryFile	pack/junegunn/start/fzf/src/terminal.go	/^func writeTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
writefile	pack/andymass/start/vim-matchup/test/lang/lua/tohtml.lua	/^function writefile(filename, value)$/;"	f
writelines	pack/junegunn/start/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
x	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^	let x = "(foo)"$/;"	v
x	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let x = (   "( )"   )$/;"	v
x	pack/andymass/start/vim-matchup/test/issues/63/test.f90	/^  real :: x /;"	v	program:matchup_parsing
x	pack/junegunn/start/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
xoffset	pack/junegunn/start/fzf/src/terminal.go	/^	xoffset      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
y	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let y =  "("$/;"	v
y	pack/andymass/start/vim-matchup/test/issues/63/test.f90	/^  real :: x = 1.0, y /;"	v	program:matchup_parsing
y	pack/junegunn/start/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yS	pack/tpope/start/surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	pack/tpope/start/surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	pack/tpope/start/surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yanked	pack/junegunn/start/fzf/src/terminal.go	/^	yanked       []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yoffset	pack/junegunn/start/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
ys	pack/tpope/start/surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	pack/tpope/start/surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
z	pack/andymass/start/vim-matchup/test/issues/10/legacy.vim	/^let z =  (   '( ' ) . ' )'$/;"	v
zsh	pack/junegunn/start/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
{init	pack/andymass/start/vim-matchup/lua/treesitter-matchup.lua	/^  return {init = function() end}$/;"	f
{is_enabled	pack/andymass/start/vim-matchup/lua/treesitter-matchup/internal.lua	/^  return {is_enabled = function(bufnr) return 0 end}$/;"	f
